/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.03.2023 15:32:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241408;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0028143022209405899, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 57,1,40, 5,-19,26, -126,-127,-63, 
  /* [1][1][][] */ 9,-1,6, -15,9,3, 6,-31,11, 
  /* [1][2][][] */ -1,19,2, 0,10,3, 45,-18,17, 
  /* [2][0][][] */ 29,-6,-8, 80,118,0, 39,-40,5, 
  /* [2][1][][] */ 9,12,-3, 70,127,-29, 19,-7,-8, 
  /* [2][2][][] */ 52,-63,21, 79,-39,-18, 33,-54,14, 
  /* [3][0][][] */ 9,41,5, 32,94,16, 1,6,-4, 
  /* [3][1][][] */ 26,46,8, 66,127,18, -12,-18,4, 
  /* [3][2][][] */ 7,8,1, 27,27,6, 1,-2,4, 
  /* [4][0][][] */ 33,70,-19, 13,81,-16, -18,7,-7, 
  /* [4][1][][] */ 39,88,39, 29,119,24, 27,49,-20, 
  /* [4][2][][] */ 59,83,34, 52,127,13, -23,22,17, 
  /* [5][0][][] */ 5,-4,-119, 4,6,-93, -3,28,-25, 
  /* [5][1][][] */ 0,-46,-127, 5,-42,-103, 0,12,-22, 
  /* [5][2][][] */ -5,5,-20, 2,-3,-11, 0,10,-11, 
  /* [6][0][][] */ 26,-62,35, 48,-86,41, 10,-19,9, 
  /* [6][1][][] */ 37,-95,62, 64,-127,71, 8,-27,17, 
  /* [6][2][][] */ 22,-34,14, 15,-43,27, -11,9,1, 
  /* [7][0][][] */ -31,18,6, -118,-47,-5, -27,22,0, 
  /* [7][1][][] */ -7,-3,6, -127,-94,-4, -7,-5,6, 
  /* [7][2][][] */ -14,41,1, -5,19,7, -19,29,0, 
  /* [8][0][][] */ 70,85,122, 72,88,127, 6,14,54, 
  /* [8][1][][] */ 29,39,71, 27,36,73, -37,-34,-1, 
  /* [8][2][][] */ -10,-1,27, -10,-2,32, -80,-79,-52, 
  /* [9][0][][] */ -18,1,13, -13,-5,3, 1,1,-11, 
  /* [9][1][][] */ 104,122,-3, 75,127,19, -8,19,27, 
  /* [9][2][][] */ -19,-18,24, 10,-26,6, 12,5,-19, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -8,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -5,-17,8, 16,-33,13, 16,-86,-41, 
  /* [11][1][][] */ -37,-33,-11, -27,-53,-28, -7,-49,-43, 
  /* [11][2][][] */ 1,-29,-65, 118,127,68, -28,21,-36, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-96,-17, -61,-110,-25, -9,-17,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 2,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 46,-6,-37, 78,-26,-50, 31,-10,-21, 
  /* [14][1][][] */ 89,-17,-73, 127,-40,-88, 58,-19,-38, 
  /* [14][2][][] */ 54,-11,-46, 73,-23,-53, 24,-8,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 4.6555189214814163e-07, 0.098364472389221191, 0.11321080476045609, 0.021579908207058907, 0.0067130480892956257, 0.11164882034063339, 0.060924392193555832, 0.17462581396102905, 0.0026705081108957529, 0.022505596280097961, 0.056405015289783478, 0.006991872563958168, 4.0983076132761198e-07, 0.046775214374065399, 0.059903256595134735, 4.4180566760587681e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 18441, -110006, -53448, 57329, 79205, 18217, 50733, -73750, -25532, 18398, 317346, -1073741824, 27754, 15417, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00027682734071277082, 0.00031860941089689732, 6.0732381825800985e-05, 1.8892545995186083e-05, 0.00031421351013705134, 0.00017145965830422938, 0.00049144984222948551, 7.5156167440582067e-06, 6.3337553001474589e-05, 0.00015874076052568853, 1.9677241652971134e-05, 1.1533876076441629e-09, 0.00013163959374651313, 0.00016858587332535535, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,51,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,78,-94,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,14,-44,15,-29,14,-29,1,3,-109,-49,8,-30,-14, -78,-42,-57,-14,-8,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,33,-25,34,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,68,2,-6,38,-39,53,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-123,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-114,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0039219232276082039, 0.0040924982167780399, 0.012237120419740677, 0.0060741393826901913, 0.0012490312801674008, 0.015425447374582291, 0.0015778476372361183, 0.0026363399811089039, 0.01149370800703764, 0.0088194999843835831, 0.03017103299498558, 0.030907778069376945, 0.011587630026042461, 0.01031977403908968, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 28660, 41761, 11934, 13086, 112547, 14055, 104486, 7455, 6715, 29050, 14072, -445, 25182, 8498, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 9.2280548415146768e-05, 9.6294075774494559e-05, 0.00028793225646950305, 0.00014292092237155885, 2.9388971597654745e-05, 0.00036295171594247222, 3.7125828384887427e-05, 6.2031533161643893e-05, 0.00027044018497690558, 0.0002075176453217864, 0.0007099066860973835, 0.00072724185883998871, 0.00027265012613497674, 0.00024281821970362216, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,2,1,123,1,-5,1,0,-127,-92,-5,0,126,-3,0, 
  /* [1][0][][] */ 0,-27,-1,85,73,12,20,5,2,-5,127,-39,0,27,-13,0, 
  /* [2][0][][] */ 0,0,-1,-12,-56,6,10,3,-1,4,-18,2,0,127,-8,0, 
  /* [3][0][][] */ 0,-10,-22,-127,76,23,70,15,2,58,0,35,0,-2,19,0, 
  /* [4][0][][] */ 0,42,-24,34,-53,34,127,11,0,-58,17,-5,0,-4,13,0, 
  /* [5][0][][] */ 0,-18,-10,-2,-21,-22,-10,17,3,10,-5,-43,0,-3,127,0, 
  /* [6][0][][] */ 0,21,-4,2,50,-24,-26,-9,1,-111,118,60,0,127,62,0, 
  /* [7][0][][] */ 0,15,-15,127,5,-4,15,7,1,62,-50,77,0,-11,48,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.095175862312316895, 0.086478263139724731, 0.10142376273870468, 0.052237443625926971, 0.057963963598012924, 0.10548115521669388, 0.072684608399868011, 0.042838644236326218, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -495, -41764, -8416, -11850, -32457, -2853, -24515, -25569, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0022394321858882904, 0.0020347826648503542, 0.0023864414542913437, 0.0012291163438931108, 0.0013638579985126853, 0.0024819094687700272, 0.0017102260608226061, 0.0010079680941998959, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 20,-127,52,-41,30,-10,-58,17, 
  /* [1][0][][] */ 62,61,-23,-103,15,-19,-73,127, 
  /* [2][0][][] */ 31,8,-48,127,53,127,55,97, 
  /* [3][0][][] */ 73,65,-80,127,-101,7,2,6, 
  /* [4][0][][] */ -32,-109,74,15,-1,35,-43,-127, 
  /* [5][0][][] */ 23,9,-33,44,6,-25,34,127, 
  /* [6][0][][] */ 54,-9,-127,-105,110,29,58,-50, 
  /* [7][0][][] */ 127,13,17,-19,28,-2,81,-55, 
  /* [8][0][][] */ 18,-99,10,106,6,24,-7,-127, 
  /* [9][0][][] */ 100,-127,8,2,-9,6,-108,90, 
  /* [10][0][][] */ -127,-40,-122,25,-7,0,-110,61, 
  /* [11][0][][] */ -16,-37,-7,-101,-127,-31,44,-15, 
  /* [12][0][][] */ 13,0,-41,61,-76,-19,62,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-36,-5,12,39,127,46,42, 
  /* [15][0][][] */ 47,-2,13,-127,71,34,-50,81, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 18,25,127,18,-21,-8,27,28, 
  /* [18][0][][] */ 88,-127,25,28,1,14,-124,-1, 
  /* [19][0][][] */ -127,-17,27,89,-62,-73,-94,86, 
  /* [20][0][][] */ 32,28,-49,103,-17,-127,-13,61, 
  /* [21][0][][] */ 56,20,127,11,-16,-12,70,13, 
  /* [22][0][][] */ -75,-16,-127,4,3,14,-105,5, 
  /* [23][0][][] */ -99,117,-21,-15,10,-13,127,-69, 
  /* [24][0][][] */ 5,-57,-54,82,-7,-62,108,127, 
  /* [25][0][][] */ 17,51,34,37,127,99,-74,-62, 
  /* [26][0][][] */ -83,-29,-127,-3,10,17,-99,-4, 
  /* [27][0][][] */ 0,-14,-28,7,-45,127,64,44, 
  /* [28][0][][] */ -3,-16,-20,43,25,127,52,57, 
  /* [29][0][][] */ 80,34,127,-3,-15,-11,85,-12, 
  /* [30][0][][] */ -74,127,-20,-26,11,-2,94,-52, 
  /* [31][0][][] */ -48,-92,-27,2,39,-70,127,104, 
  /* [32][0][][] */ 7,-2,-55,122,-9,101,87,127, 
  /* [33][0][][] */ 4,53,-15,-93,10,-10,-3,127, 
  /* [34][0][][] */ -22,81,-10,-89,35,-14,19,127, 
  /* [35][0][][] */ 127,13,-9,-35,25,38,91,-46, 
  /* [36][0][][] */ -127,-8,22,56,-31,9,-110,79, 
  /* [37][0][][] */ 0,-25,-10,25,27,127,53,51, 
  /* [38][0][][] */ 16,31,10,86,127,-14,-19,39, 
  /* [39][0][][] */ 8,25,35,-124,24,-3,-39,127, 
  /* [40][0][][] */ 88,31,127,-3,-13,-11,98,-13, 
  /* [41][0][][] */ 4,-29,-31,89,54,127,81,119, 
  /* [42][0][][] */ -67,-14,127,28,-39,16,-29,63, 
  /* [43][0][][] */ -11,-56,7,100,-16,8,19,-127, 
  /* [44][0][][] */ 38,1,-59,-127,59,-27,-2,-111, 
  /* [45][0][][] */ -93,127,-6,-54,13,-5,79,-57, 
  /* [46][0][][] */ -127,-26,33,24,-25,36,-89,38, 
  /* [47][0][][] */ 118,20,127,1,26,-12,124,-18, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00092711555771529675, 0.0010568947764113545, 0.00061448226915672421, 0.00061471137451007962, 0.00058656802866607904, 0.00060630805091932416, 0.00076465256279334426, 0.0034985835663974285, 0.00087824166985228658, 0.0044155502691864967, 0.0012447369517758489, 0.003682245034724474, 0.00035428162664175034, 3.937008052901092e-09, 0.0017457198118790984, 0.00037236823118291795, 3.937008052901092e-09, 0.013274062424898148, 0.00074133864836767316, 0.0006929091177880764, 0.00057155458489432931, 0.0094414539635181427, 0.00067111046519130468, 0.0028940278571099043, 0.0019766357727348804, 0.0012193180155009031, 0.0046643931418657303, 0.003889935789629817, 0.00055912998504936695, 0.003499545156955719, 0.0022882786579430103, 0.00029824857483617961, 0.00037577806506305933, 0.022789394482970238, 0.0010759194847196341, 0.0015219635097309947, 0.011141140013933182, 0.00067893258528783917, 0.0047865817323327065, 0.0006327418377622962, 0.0026376063469797373, 0.0003213419986423105, 0.0012544961646199226, 0.020817102864384651, 0.00076067470945417881, 0.00092124618822708726, 0.00078345718793570995, 0.00039956168620847166, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 3882, 53, 8722, 5214, 5842, 5866, 8551, -28, 35, -296, 2023, 397, 10593, -70269176, 2573, 15196, -56724924, -93, -494, 9581, 3169, -17, -28, 365, 3265, -828, 61, 536, 3409, 1423, 2209, 13517, 3458, 240, 160, -1355, 234, 3221, -139, 9413, 1818, 11708, -214, -68, 11296, 145, 6076, 3847, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00054351281141862273, 0.00061959470622241497, 0.00036023449501954019, 0.00036036880919709802, 0.00034387002233415842, 0.00035544243291951716, 0.00044827040983363986, 0.0020510118920356035, 0.0005148609634488821, 0.0025885750073939562, 0.00072971539339050651, 0.0021586816292256117, 0.00020769429102074355, 2.3080342081982508e-09, 0.0010234118672087789, 0.00021829739853274077, 2.3080342081982508e-09, 0.007781794760376215, 0.00043460284359753132, 0.00040621150401420891, 0.00033506852923892438, 0.0055349641479551792, 0.0003934322448913008, 0.0016965967370197177, 0.0011587842600420117, 0.00071481376653537154, 0.0027344569098204374, 0.0022804385516792536, 0.00032778471359051764, 0.0020515755750238895, 0.001341481925919652, 0.00017484543786849827, 0.0002202963805757463, 0.013360069133341312, 0.00063074775971472263, 0.00089223688701167703, 0.0065313889645040035, 0.00039801787352189422, 0.002806088887155056, 0.00037093900027684867, 0.0015462720766663551, 0.00018838373944163322, 0.00073543662438169122, 0.012203832156956196, 0.00044593843631446362, 0.00054007198195904493, 0.00045929444604553282, 0.000234239298151806, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-6,-17,7,-40,-79,-68,-27,-50,7,64,34,-71,114,-43,-113,-84,37,-7,-1,-70,-110,-79,-35,-125,-65,-21,71,15,95,27,-127,-89,-7,55,19,48,-127,77,-77,-14,106,-106,-2,-35,-87,107, 75,12,-27,-29,57,-127,-127,-80,61,-76,-116,108,38,-82,-1,62,-52,-112,58,7,10,-112,-127,-70,-4,-127,-122,-41,-54,21,-57,54,29,-127,64,84,14,72,-92,127,-127,6,125,-127,1,-22,-127,94, -32,43,7,-4,-65,-109,-59,-17,87,-8,-127,37,7,-71,-100,-11,-127,-25,28,11,-15,-75,-35,-24,-10,-31,-59,-13,-9,17,-24,10,107,-85,69,32,15,36,-4,16,-79,3,7,-81,-18,5,-56,15, 
  /* [0][1][][] */ -85,-127,-44,-44,-11,54,98,-104,-26,-111,-21,111,90,-64,27,-97,-121,-93,90,-77,41,-87,-102,-127,42,-118,-79,-39,127,-61,127,85,-43,-84,-14,84,-35,-76,-108,89,42,59,105,-107,-91,-118,82,119, 127,-82,-127,-127,127,40,93,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-120,127,-98,-127,-127,-119,-127,-71,127,28,-111,127,127,-68,-127,-97,90,61,127,127,-118,-113,-127,124,127, -53,31,-62,-84,-120,-23,30,-38,127,-21,-76,35,55,-70,-25,-44,-37,-30,55,-72,57,-80,-39,-24,48,-6,-46,-62,16,-90,-36,20,30,-96,117,24,-36,-62,2,-15,36,53,10,-76,-58,-37,65,36, 
  /* [0][2][][] */ -60,-106,-33,-34,-1,35,-4,-35,-37,-60,-17,58,76,-127,-127,-64,-43,-18,65,75,50,-32,-12,-60,32,-55,-11,-60,75,29,77,63,108,-26,-37,-9,-94,36,-18,30,10,38,16,-56,97,-77,4,31, 87,-73,-88,-84,81,19,7,-47,48,-70,-33,56,82,-26,15,92,-24,-30,77,118,80,-52,-17,-57,93,-69,-19,-99,-51,40,-45,111,-18,-48,67,6,-127,50,-15,-2,11,32,16,-66,127,-99,-12,40, -28,29,-41,-36,-80,-18,22,-12,59,-5,-13,31,30,-43,110,-29,-93,-6,30,59,73,-27,-1,-3,43,0,-4,-64,-14,28,-20,40,-90,-41,65,4,-20,22,27,-39,6,35,-4,-15,62,-34,-5,18, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0035677291452884674, 0.0027185003273189068, 0.0080688614398241043, 0.0051795062609016895, 0.0084537314251065254, 0.0074401353485882282, 0.0062907664105296135, 0.0029498967342078686, 0.0042600994929671288, 0.0018750145100057125, 0.0038872500881552696, 0.0015913189854472876, 0.0077880006283521652, 0.23551659286022186, 0.0032010097056627274, 0.009221949614584446, 0.1168077290058136, 0.0012925539631396532, 0.0033796527422964573, 0.0061577633023262024, 0.0049102753400802612, 0.0079365912824869156, 0.0048090191558003426, 0.0017374446615576744, 0.0038397733587771654, 0.0069222808815538883, 0.0017594228265807033, 0.0019748276099562645, 0.0098889889195561409, 0.0034045160282403231, 0.0028612744063138962, 0.0099738752469420433, 0.0098889647051692009, 0.00042510853381827474, 0.0041619432158768177, 0.0090613523498177528, 0.00061017787083983421, 0.016010569408535957, 0.001676094951108098, 0.003849453292787075, 0.0032423015218228102, 0.0093628084287047386, 0.0035506619606167078, 0.00044723518658429384, 0.0082437638193368912, 0.0041251862421631813, 0.0090918531641364098, 0.0054402383975684643, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 70496, 60774, 60157, 42254, 218, 13720, 3445, 23306, 22521, 11356, 28429, 2430, -45657, -127, 33650, 637, -204, 17834, 4804, 2770, -15670, -840, 49956, 26916, -18955, 17101, 28896, 21085, -2381, 14663, -7787, -51472, 10495, 74554, 27123, 1411, 56092, -364, 117803, -25802, 16755, -27545, 5142, 92736, -1208, 59896, 572, -22961, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.3946571976412088e-05, 6.3964711443986744e-05, 0.00018985556380357593, 0.00012187074025860056, 0.00019891133706551045, 0.00017506201402284205, 0.00014801803627051413, 6.9409339630510658e-05, 0.00010023763752542436, 4.4117990910308436e-05, 9.1464709839783609e-05, 3.7442801840370521e-05, 0.00018324707343708724, 0.005541567225009203, 7.5317875598557293e-05, 0.00021698705677408725, 0.0027484172023832798, 3.0413035347010009e-05, 7.9521239968016744e-05, 0.00014488854503724724, 0.00011553589138202369, 0.00018674333114176989, 0.00011315339361317456, 4.0881051972974092e-05, 9.0347610239405185e-05, 0.00016287720063701272, 4.1398183384444565e-05, 4.6466531784972176e-05, 0.00023268209770321846, 8.0106263339985162e-05, 6.7324108385946602e-05, 0.00023467942082788795, 0.00023268153017852455, 1.000255360850133e-05, 9.7928073955699801e-05, 0.00021320828818716109, 1.435712692909874e-05, 0.0003767192829400301, 3.943752744817175e-05, 9.0575376816559583e-05, 7.6289448770694435e-05, 0.00022030137188266963, 8.3544990047812462e-05, 1.0523181117605418e-05, 0.00019397091818973422, 9.7063209977932274e-05, 0.00021392595954239368, 0.00012800561671610922, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -10,2,9,-87,7,24,6,8,0,9,3,-8,90,0,-1,4,0,-7,-7,-1,72,-3,1,7,28,38,18,7,2,4,-1,-127,12,9,-3,-1,-24,-1,-10,29,5,-24,-11,8,2,0,2,1, 
  /* [1][0][][] */ -38,-10,1,-3,47,33,-29,77,22,7,-31,-22,12,0,20,41,0,42,21,-47,1,21,127,17,-27,-2,57,5,22,-4,22,-10,14,-6,-9,-17,5,-55,10,4,-10,-8,-81,-10,-32,4,-47,-97, 
  /* [2][0][][] */ -57,17,-2,8,44,-10,27,28,-9,58,8,-7,5,0,5,52,0,16,-127,21,1,12,8,-15,-26,4,37,3,7,29,26,4,7,-5,-13,-14,6,1,6,0,33,-5,-32,0,23,-58,23,11, 
  /* [3][0][][] */ 0,4,1,11,-5,26,0,-4,66,20,0,-3,24,0,-30,-10,0,-3,-10,2,-6,1,7,-18,-14,-8,-7,-1,-5,-5,-2,-10,-47,43,-51,-2,8,2,6,-127,0,2,2,-51,-2,-3,-1,8, 
  /* [4][0][][] */ 0,-2,78,32,2,-22,-3,-2,3,-3,-4,-12,-83,0,-10,3,0,6,5,0,61,3,0,-3,-16,28,-4,47,-8,-3,-3,91,4,6,-1,-4,11,-10,-13,-18,-3,-127,3,-3,-1,-2,0,-1, 
  /* [5][0][][] */ -4,46,4,-9,2,48,24,14,-22,32,10,55,26,0,-127,-3,0,13,-40,19,-11,9,-12,42,-21,-1,29,-5,-14,22,22,-19,52,25,-39,-6,3,15,-46,16,23,-14,-11,33,22,61,21,24, 
  /* [6][0][][] */ -19,-53,2,8,36,-47,-20,8,29,-24,-12,88,-3,0,-127,33,0,-8,43,-21,-3,3,26,-36,31,-1,-5,-13,47,-12,-11,-1,91,-29,25,-3,-1,-9,-72,-23,-14,-14,-6,-31,-23,-78,-21,-27, 
  /* [7][0][][] */ -112,-21,-13,8,127,20,66,24,15,8,33,-37,-30,0,89,106,0,12,4,59,-12,-2,-30,44,19,8,48,0,47,63,56,-8,-8,-14,-17,-22,8,23,25,32,71,5,-30,-13,58,-1,61,76, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.058945197612047195, 0.030577637255191803, 0.082106783986091614, 0.061360586434602737, 0.047060273587703705, 0.058470465242862701, 0.038919270038604736, 0.025419812649488449, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -5991, -25257, 24248, 21262, 4497, -615, 35986, 11432, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0013869458343833685, 0.00071947381366044283, 0.0019319243729114532, 0.001443778513930738, 0.0011073006317019463, 0.0013757756678387523, 0.00091574754333123565, 0.00059811322716996074, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 75,34,-4,-13,127,30,-50,-29, 
  /* [1][0][][] */ -5,-2,2,127,6,-7,9,15, 
  /* [2][0][][] */ 31,-127,-27,38,-3,-71,82,15, 
  /* [3][0][][] */ 127,-32,-8,13,-11,-33,32,9, 
  /* [4][0][][] */ 10,-33,127,-16,-10,-48,14,-102, 
  /* [5][0][][] */ 65,-2,-3,-3,127,11,-3,4, 
  /* [6][0][][] */ -13,88,-18,127,30,53,-69,-53, 
  /* [7][0][][] */ -9,127,-2,0,-1,-14,19,1, 
  /* [8][0][][] */ 127,45,-5,5,-50,-11,4,-32, 
  /* [9][0][][] */ -127,19,4,18,53,7,-13,-3, 
  /* [10][0][][] */ -65,-5,4,127,34,33,-7,-8, 
  /* [11][0][][] */ -127,-6,5,-62,53,-1,-22,-43, 
  /* [12][0][][] */ 127,17,-2,12,-41,-10,2,-33, 
  /* [13][0][][] */ -11,77,-127,-9,13,103,-75,78, 
  /* [14][0][][] */ -45,-30,-11,127,32,13,-5,-25, 
  /* [15][0][][] */ -6,127,4,-4,3,-14,11,-52, 
  /* [16][0][][] */ -7,-127,-19,10,-14,-122,119,-35, 
  /* [17][0][][] */ 14,127,8,-6,5,71,-88,-15, 
  /* [18][0][][] */ -10,34,-127,-8,13,52,-28,67, 
  /* [19][0][][] */ -69,20,1,12,-127,2,17,18, 
  /* [20][0][][] */ -127,-28,-4,-7,86,-24,64,3, 
  /* [21][0][][] */ -63,0,-5,0,-127,-6,23,5, 
  /* [22][0][][] */ -127,-24,1,-8,76,-15,34,47, 
  /* [23][0][][] */ -17,-23,-9,-12,-2,81,-127,-85, 
  /* [24][0][][] */ -7,41,-127,4,11,43,-20,71, 
  /* [25][0][][] */ 96,-48,7,127,-89,2,12,-48, 
  /* [26][0][][] */ -1,-18,-2,5,-10,125,127,-33, 
  /* [27][0][][] */ 57,-5,-16,8,127,33,41,-22, 
  /* [28][0][][] */ -3,127,-71,-1,10,72,-30,118, 
  /* [29][0][][] */ -6,9,-1,-5,-5,91,-127,-82, 
  /* [30][0][][] */ 6,-4,0,-127,-8,3,0,-11, 
  /* [31][0][][] */ -69,-2,6,-2,-127,8,15,3, 
  /* [32][0][][] */ -11,38,26,-127,-8,40,-91,-108, 
  /* [33][0][][] */ -59,-7,-9,2,-127,47,46,-2, 
  /* [34][0][][] */ -127,85,14,41,56,-32,2,5, 
  /* [35][0][][] */ -15,127,-23,-1,-4,-101,79,-34, 
  /* [36][0][][] */ -10,55,18,-31,1,104,-127,-36, 
  /* [37][0][][] */ 28,-74,-5,18,24,-120,127,-13, 
  /* [38][0][][] */ -1,-127,1,-7,18,48,-45,71, 
  /* [39][0][][] */ 5,-127,-11,-8,-3,-8,-50,-92, 
  /* [40][0][][] */ 117,48,1,-9,-52,80,-127,-95, 
  /* [41][0][][] */ 11,-127,20,1,-4,78,-56,122, 
  /* [42][0][][] */ 59,1,-8,-127,-52,8,-2,-44, 
  /* [43][0][][] */ -84,-23,16,-127,63,11,-23,-15, 
  /* [44][0][][] */ -4,-30,2,23,-20,105,127,-17, 
  /* [45][0][][] */ -127,-25,-4,-16,12,13,26,-24, 
  /* [46][0][][] */ 11,79,127,0,-5,5,12,25, 
  /* [47][0][][] */ -5,1,13,127,6,0,1,5, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00015378666284959763, 0.00073477393016219139, 0.0005982215516269207, 0.0012234359746798873, 0.003437655046582222, 0.0012934244005009532, 0.0023808088153600693, 0.0029303168412297964, 0.0014011093880981207, 0.0015074200928211212, 0.001699551590718329, 0.0012905373005196452, 0.0012991767143830657, 0.0012579201720654964, 0.0013944355305284262, 0.0044602476991713047, 0.00075665389886125922, 0.00083446339704096317, 0.0045125759206712246, 0.0002724664518609643, 0.00056335859699174762, 0.00084457016782835126, 0.0010194104397669435, 0.0025645024143159389, 0.00078961363760754466, 0.00055992300622165203, 0.00032348179956898093, 0.00096033170120790601, 0.0018415380036458373, 0.0024554494302719831, 0.0012967288494110107, 0.00094253959832713008, 0.0022379162255674601, 0.00055436126422137022, 0.00079575757263228297, 0.00075677316635847092, 0.0011752605205401778, 0.00078088330337777734, 0.00030157578294165432, 0.0063745933584868908, 0.0013172132894396782, 0.0028674467466771603, 0.00089298887178301811, 0.0010646440787240863, 0.00054546812316402793, 0.0011866743443533778, 0.0022705441806465387, 0.0024260159116238356, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 57002, 6289, 5176, 5338, 1311, 7893, -1634, -210, 815, 1840, 2700, 182, 1508, -750, 652, -1647, 4345, 10310, -224, 20082, 4395, 2432, 7854, -412, 3119, 4206, 25451, 7723, -64, -2136, 98, 1822, -1791, 8040, 2713, 4971, 6307, 3507, 15683, 1436, -910, 1942, 1170, 2844, 4461, 1895, -1040, 2235, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 7.5943258707411587e-05, 0.00036284764064475894, 0.00029541505500674248, 0.00060415978077799082, 0.0016975902253761888, 0.00063872162718325853, 0.0011756961466744542, 0.0014470553724095225, 0.00069189886562526226, 0.00074439746094867587, 0.00083927623927593231, 0.00063729588873684406, 0.00064156221924349666, 0.0006211888394318521, 0.00068860314786434174, 0.0022025690414011478, 0.00037365246680565178, 0.00041207650792784989, 0.0022284099832177162, 0.0001345499767921865, 0.00027819894603453577, 0.00041706746560521424, 0.00050340744201093912, 0.0012664081295952201, 0.00038992869667708874, 0.00027650239644572139, 0.00015974248526617885, 0.0004742330638691783, 0.00090939225628972054, 0.0012125553330406547, 0.00064035342074930668, 0.00046544693759642541, 0.0011051326291635633, 0.00027375586796551943, 0.00039296271279454231, 0.00037371134385466576, 0.00058036966947838664, 0.00038561748806387186, 0.00014892480976413935, 0.0031479154713451862, 0.00065046909730881453, 0.0014160086866468191, 0.00044097768841311336, 0.00052574486471712589, 0.0002693642454687506, 0.00058600609190762043, 0.0011212449753656983, 0.0011980204144492745, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,21,108,4,81,0,28,16,8,9,8,-9,-9,-45,9,-2,8,-23,-114,-7,-22,127,-10,-2,6,-5,10,-4,4,16,99,20,28,38,-28,1,35,-2,2,17,-68,-9,-9,16,3,-6,-11, 127,10,15,-127,28,87,11,11,125,127,7,43,-50,-24,5,8,127,-56,-59,-56,-102,25,-109,15,17,71,-32,-84,25,21,10,-123,5,-61,127,9,-40,-46,-5,115,-79,-97,-30,2,-34,-8,-127,23, -32,-3,8,14,0,65,4,18,28,9,-14,32,-15,-3,16,4,-103,29,-2,78,-32,-12,-18,-6,-4,-59,-3,30,-16,4,4,-22,7,-24,17,-19,0,48,41,-12,50,38,-16,11,-43,4,-1,-5, 
  /* [0][1][][] */ 125,7,1,-98,14,-27,36,-16,10,9,-14,54,-7,-1,18,-32,0,-50,-60,-87,9,-73,-125,-19,5,98,-14,-127,-8,33,12,-108,17,-53,-2,127,-3,59,-41,41,-63,-127,39,-89,-44,-14,-12,-6, 26,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-28,-42,127,-127,127,127,127,-79,127,127,127,-121,101,107, 53,5,49,-14,6,-61,44,19,-23,15,-106,-7,0,-40,127,5,63,-66,-70,86,13,-46,11,-34,1,6,-38,69,20,40,1,3,31,-44,9,66,-5,65,67,-10,-81,8,-85,-32,27,-15,-10,6, 
  /* [0][2][][] */ -53,-7,26,-17,7,34,-37,23,9,-23,11,33,5,-6,-38,18,5,21,-14,105,5,-32,-17,-12,-3,22,-1,52,-9,3,46,-32,-18,-44,-31,-40,-1,31,9,-22,9,-4,42,-37,-36,18,-10,17, 68,125,75,21,16,-20,123,35,19,-3,43,27,-6,-1,-91,25,-58,-57,-36,123,-38,48,12,20,32,-63,-41,30,78,0,127,22,84,-26,8,-36,-25,-17,-12,118,-28,-12,-41,45,21,-32,7,-127, -42,-4,7,-4,5,-5,-61,8,-18,-10,-41,-40,19,-9,-10,11,33,24,-8,-127,23,-10,4,-9,-7,11,-11,-55,-15,8,6,8,-21,86,-36,-23,-4,37,24,-60,4,8,-38,6,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.013843231834471226, 0.012854967266321182, 0.007483441848307848, 0.009482240304350853, 0.0073081939481198788, 0.004044567234814167, 0.043598715215921402, 0.0068176551721990108, 0.010084147565066814, 0.0073376442305743694, 0.0052426867187023163, 0.0059880674816668034, 0.017047533765435219, 0.0077157537452876568, 0.0041691134683787823, 0.061355497688055038, 0.0092289261519908905, 0.012132421135902405, 0.0040603512898087502, 0.0069902748800814152, 0.008092069998383522, 0.0072617214173078537, 0.011313216760754585, 0.01051033940166235, 0.0068211178295314312, 0.0063759018667042255, 0.032728556543588638, 0.0039924201555550098, 0.014257327653467655, 0.42184028029441833, 0.0041512297466397285, 0.008504076860845089, 0.053139239549636841, 0.0074628144502639771, 0.0088642602786421776, 0.0068814121186733246, 0.017202133312821388, 0.0059315785765647888, 0.011589447967708111, 0.0010132560273632407, 0.012572687119245529, 0.0029241838492453098, 0.0075264666229486465, 0.006018404383212328, 0.0061569302342832088, 0.0045984820462763309, 0.0093300128355622292, 0.0067755468189716339, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -52235, -74, 9294, 164, 5795, -5936, 1039, 21665, 575, 27661, -2175, 30829, -5490, -977, 26030, 1029, 451, 15040, 23173, 11372, 489, -737, 388, 8288, -8212, 24338, 46012, 35513, 1975, 76, -142, 1004, 719, 16295, -7106, 15883, -10662, 18413, -22121, 97945, 11038, 19257, 9475, -1539, 16176, 3238, 1109, -157, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00032572311465628445, 0.00030246982350945473, 0.00017608098278287798, 0.00022311153588816524, 0.00017195750842802227, 9.5166287792380899e-05, 0.0010258521651849151, 0.00016041542403399944, 0.00023727407096885145, 0.00017265045607928187, 0.00012335734209045768, 0.00014089570322539657, 0.00040111845009960234, 0.00018154714780393988, 9.8096788860857487e-05, 0.0014436588389798999, 0.00021715120237786323, 0.00028546873363666236, 9.5537681772839278e-05, 0.0001644770527491346, 0.00019040165352635086, 0.0001708640338620171, 0.000266193354036659, 0.00024730211589485407, 0.00016049690020736307, 0.00015002122381702065, 0.00077008368680253625, 9.3939299404155463e-05, 0.00033546655322425067, 0.0099256541579961777, 9.7675998404156417e-05, 0.00020009593572467566, 0.0012503350153565407, 0.00017559563275426626, 0.00020857084018643945, 0.00016191558097489178, 0.00040475607966072857, 0.000139566560392268, 0.00027269290876574814, 2.38413194892928e-05, 0.00029582795104943216, 6.8804329202976078e-05, 0.00017709333042148501, 0.00014160951832309365, 0.00014486894360743463, 0.00010819957969943061, 0.00021952971292193979, 0.00015942462778184563, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -48,-17,-39,12,-1,-25,7,-4,-118,127,-39,110,110,13,65,-31,-9,-37,12,-4,-10,-9,-24,-30,19,-85,14,55,-22,12,13,-35,5,-67,97,26,10,-8,-11,-14,118,0,37,-29,-27,17,-22,-29, 
  /* [1][0][][] */ 1,34,127,8,-2,-20,5,-80,31,-7,30,6,-19,9,-12,-117,17,-54,8,6,-21,36,26,-37,-16,-2,18,-1,9,-7,15,6,1,14,18,13,-8,-34,63,-61,12,37,-12,32,-11,6,27,-1, 
  /* [2][0][][] */ 6,-51,16,-41,33,27,-5,-31,6,-1,-2,15,-10,58,1,-4,-37,127,-24,-35,-15,21,-37,-10,120,5,3,-8,-26,-9,2,-41,-6,-15,-1,11,-9,-1,-15,8,16,-16,-25,-2,2,26,-23,-41, 
  /* [3][0][][] */ 3,-89,-3,2,3,-6,-11,-4,-8,-17,22,22,16,-7,46,0,-11,-24,1,24,-6,23,-25,-4,8,47,-1,6,-8,3,127,2,10,8,-5,-1,-23,-18,-11,7,-10,7,-9,25,-8,-5,1,32, 
  /* [4][0][][] */ -98,11,3,-1,2,-38,7,6,44,-41,20,-21,-35,2,-10,-9,5,5,-2,25,13,-30,15,0,-6,45,4,108,0,-2,-7,-26,1,-127,-35,14,4,1,3,2,-56,-8,-9,16,-63,3,5,5, 
  /* [5][0][][] */ -25,23,24,5,-51,17,-5,44,29,-1,12,8,-4,-42,1,33,-2,-87,21,-1,41,-43,11,38,13,5,-81,-44,-45,-34,19,-1,-6,-67,-5,-64,64,15,-47,10,21,-44,1,3,127,-10,-43,-8, 
  /* [6][0][][] */ -27,-26,-17,-11,35,-37,-6,-17,-12,-4,28,-22,-14,33,8,-47,-8,1,0,-23,-40,40,-14,-77,-3,-12,-53,-66,41,50,-19,-7,-3,-65,-13,61,-69,-52,10,-56,-11,8,20,41,127,-31,40,20, 
  /* [7][0][][] */ 13,29,-75,22,-23,12,2,54,-9,0,59,-30,7,-29,-8,-6,-19,-127,41,-43,55,36,13,-51,20,-22,23,3,-21,29,-15,2,0,32,-7,-20,-10,-55,-43,-65,-9,-24,39,57,-27,-22,-5,-3, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.019903469830751419, 0.028072930872440338, 0.060459908097982407, 0.065944403409957886, 0.03399522602558136, 0.02492680586874485, 0.031161656603217125, 0.040482845157384872, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -40876, 25712, -13019, -7408, 21146, 10, 31754, 43158, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00046831695362925529, 0.00066053954651579261, 0.0014225861523300409, 0.0015516330022364855, 0.00079988769721239805, 0.00058651308063417673, 0.00073321547824889421, 0.0009525375789962709, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,3,3,72,-34,38,29,-26, 
  /* [1][0][][] */ 31,66,40,19,14,-44,108,127, 
  /* [2][0][][] */ -44,-8,0,0,-127,-8,10,9, 
  /* [3][0][][] */ 90,-12,-16,-115,-127,21,29,-15, 
  /* [4][0][][] */ -127,29,-33,-3,52,-23,50,27, 
  /* [5][0][][] */ -95,-28,16,-4,-127,2,11,90, 
  /* [6][0][][] */ -33,-127,18,-16,9,-13,17,58, 
  /* [7][0][][] */ -70,-8,3,109,127,-30,-29,12, 
  /* [8][0][][] */ 79,11,4,-127,-1,-28,-49,-33, 
  /* [9][0][][] */ -13,-127,-9,-4,3,80,-42,99, 
  /* [10][0][][] */ -96,-2,2,18,-127,70,63,-18, 
  /* [11][0][][] */ 111,11,43,19,-61,-43,-35,-127, 
  /* [12][0][][] */ 1,16,44,-9,11,-82,127,62, 
  /* [13][0][][] */ 81,-14,10,-24,125,127,116,-56, 
  /* [14][0][][] */ 127,52,-16,28,-92,-22,-22,-11, 
  /* [15][0][][] */ -14,-127,12,-11,2,9,13,39, 
  /* [16][0][][] */ -34,-13,1,-3,-127,10,8,-9, 
  /* [17][0][][] */ -30,97,-111,5,15,-127,112,-82, 
  /* [18][0][][] */ 127,-26,-40,12,-59,30,9,100, 
  /* [19][0][][] */ 127,-53,-8,-2,46,3,33,4, 
  /* [20][0][][] */ 127,23,-22,109,-4,28,5,-50, 
  /* [21][0][][] */ 4,28,-56,8,-32,92,-127,-87, 
  /* [22][0][][] */ -127,26,50,0,-47,14,-73,-39, 
  /* [23][0][][] */ -42,-57,9,22,-127,66,80,-22, 
  /* [24][0][][] */ 127,-4,-7,0,-83,-10,5,8, 
  /* [25][0][][] */ 25,-13,0,-27,127,51,50,-36, 
  /* [26][0][][] */ -3,-109,-1,-33,0,-127,85,-51, 
  /* [27][0][][] */ -15,-127,27,-14,-2,-53,30,-13, 
  /* [28][0][][] */ -88,34,-11,8,-16,-43,127,91, 
  /* [29][0][][] */ -9,45,17,7,1,36,-98,-127, 
  /* [30][0][][] */ 127,-16,8,12,-74,5,-50,-21, 
  /* [31][0][][] */ 6,-13,63,-11,12,-108,127,53, 
  /* [32][0][][] */ -77,29,6,4,-127,-108,-95,53, 
  /* [33][0][][] */ -29,11,-1,25,-127,-59,-43,23, 
  /* [34][0][][] */ 13,-127,57,-10,-12,96,-80,60, 
  /* [35][0][][] */ -22,-49,-127,-8,-3,-62,41,-52, 
  /* [36][0][][] */ 5,127,63,12,-9,8,-19,-41, 
  /* [37][0][][] */ -127,29,35,-14,59,-30,-5,-100, 
  /* [38][0][][] */ -127,-13,-43,-8,42,17,40,107, 
  /* [39][0][][] */ -3,-36,77,0,18,-67,127,88, 
  /* [40][0][][] */ -38,-22,-13,-36,-127,111,126,-28, 
  /* [41][0][][] */ -127,53,19,-77,-95,-103,-91,49, 
  /* [42][0][][] */ -45,-127,-99,-9,-6,68,-118,-85, 
  /* [43][0][][] */ -71,2,-28,-127,99,55,77,15, 
  /* [44][0][][] */ 127,-7,26,-82,25,-40,-6,47, 
  /* [45][0][][] */ -16,-127,-14,-11,-8,-78,80,2, 
  /* [46][0][][] */ 107,-4,1,-24,127,-38,-24,4, 
  /* [47][0][][] */ 127,3,8,109,-1,18,10,-47, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00070602260529994965, 0.0013630654430016875, 0.0005148873315192759, 0.0005617714487016201, 0.00041889419662766159, 0.00040619674837216735, 0.00074530206620693207, 0.00040860340232029557, 0.00060902239056304097, 0.0015936469426378608, 0.001763039967045188, 0.00047939206706359982, 0.00066777237225323915, 0.0012451346265152097, 0.00026450460427440703, 0.00084211968351155519, 0.00048871134640648961, 0.00090194476069882512, 0.00051479652756825089, 0.00065179087687283754, 0.00063004205003380775, 0.00036568177165463567, 0.00080748286563903093, 0.00027100130682811141, 0.00054763135267421603, 0.00055762141710147262, 0.0035531104076653719, 0.00089196080807596445, 0.00034738646354526281, 0.00073156802682206035, 0.00049738324014469981, 0.00038167810998857021, 0.0013405118370428681, 0.00049034523544833064, 0.0018420738633722067, 0.0010546277044340968, 0.001442698179744184, 0.00073686952237039804, 0.00038488954305648804, 0.00058585428632795811, 0.00029328966047614813, 0.00046862559975124896, 0.00059036357561126351, 0.00050285924226045609, 0.0038172986824065447, 0.00068272062344476581, 0.00062252144562080503, 0.0020403950475156307, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 399, 719, 1518, 363, 7596, 14077, 2088, -66, -706, -392, 819, 870, 2669, 901, 19308, 2096, 1558, -608, -198, 1981, -1318, 10102, 6516, 8331, 4153, 263, 2781, 2987, 7048, -477, 7497, 4429, 400, -152, 2876, 2460, -1366, 166, -557, 4492, 949, -442, -696, 24, 724, 2906, 529, 824, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00049599644262343645, 0.00095758354291319847, 0.00036171969259157777, 0.00039465681766159832, 0.00029428239213302732, 0.00028536215540952981, 0.00052359112305566669, 0.00028705288423225284, 0.00042785165715031326, 0.0011195720871910453, 0.0012385743902996182, 0.00033678350155241787, 0.00046912481775507331, 0.00087473454186692834, 0.0001858203177107498, 0.00059160764794796705, 0.00034333049552515149, 0.0006336360820569098, 0.00036165589699521661, 0.0004578974621836096, 0.00044261841685511172, 0.0002568995114415884, 0.00056727451737970114, 0.00019038439495489001, 0.00038472309825010598, 0.00039174134144559503, 0.0024961384478956461, 0.00062662211712449789, 0.00024404664873145521, 0.00051394267939031124, 0.00034942268393933773, 0.00026813728618435562, 0.00094173912657424808, 0.00034447832149453461, 0.0012940975138917565, 0.00074089918052777648, 0.0010135272750630975, 0.00051766709657385945, 0.00027039338601753116, 0.00041157554369419813, 0.00020604244491551071, 0.00032921982347033918, 0.00041474343743175268, 0.0003532696864567697, 0.0026817363686859608, 0.00047962629469111562, 0.00043733502388931811, 0.0014334224397316575, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 70,-91,97,71,54,-34,107,-62,61,-88,-80,48,51,-43,-72,-89,102,79,48,78,66,-74,-83,52,-33,-41,-65,-64,-67,62,-63,-114,-12,42,68,63,-66,54,-50,-23,52,-73,58,61,-93,12,74,-30, 82,-96,127,85,-77,-68,-57,-83,96,-102,-64,74,79,-111,-96,90,-38,96,83,127,84,-115,51,72,-53,-78,-68,-80,56,79,-29,-127,-87,79,80,82,-82,83,-85,-17,77,-94,83,86,-72,-127,92,-103, 34,-45,69,37,17,-40,-48,-38,41,-31,5,34,29,-79,-56,-2,-54,37,34,70,33,-54,31,26,-29,-45,-46,-23,30,30,88,-89,-85,43,35,33,-29,38,-37,-10,41,-40,35,42,-6,-8,37,-71, 
  /* [0][1][][] */ 92,-110,-41,94,56,-81,127,-89,87,-113,-71,81,83,-110,-14,-127,127,109,74,-39,84,106,-127,73,73,-75,-95,-98,-127,86,-70,-7,-90,71,106,96,-85,79,-80,90,84,-102,87,89,-89,109,93,-90, 127,-127,-64,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-23,96,-66,127,127,-51,127,127,67,127,127,-127,-127,-127,53,127,-28,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 62,-76,-33,66,36,-61,-49,-61,56,-43,-60,59,48,-53,-17,9,-64,51,57,-30,57,65,50,65,66,-65,-63,-46,35,55,127,15,-63,69,48,48,-48,59,-59,57,60,-58,53,60,-60,-67,58,-58, 
  /* [0][2][][] */ 45,-50,-45,49,28,-51,63,-42,41,-73,-4,39,55,-72,82,-79,73,51,34,-30,26,-13,-76,30,-25,-44,-48,-48,-74,32,-41,92,-75,36,48,42,-27,37,-43,-86,48,-52,40,43,-23,16,40,-73, 74,-73,-47,80,-56,-63,-72,-66,51,-78,-67,60,73,-49,127,31,-46,60,60,-42,55,-18,42,68,-50,-66,-77,-61,32,62,-22,119,-55,65,57,57,-50,61,-68,-106,69,-69,59,61,-87,50,62,-52, 42,-39,-26,46,29,-19,-17,-33,14,-26,-53,28,31,4,67,23,-37,22,28,-31,28,0,40,42,-24,-29,-49,-24,33,33,62,67,1,33,15,22,-22,30,-30,-54,28,-33,25,28,-61,9,30,-4, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0028423357289284468, 0.0019215944921597838, 0.0099585400894284248, 0.0023670282680541277, 0.0065035433508455753, 0.0040743965655565262, 0.004929455928504467, 0.0041511557064950466, 0.0038475415203720331, 0.0017816581530496478, 0.0023452350869774818, 0.0061594871804118156, 0.0021235095337033272, 0.0017432118766009808, 0.0062170699238777161, 0.0068916040472686291, 0.011022591963410378, 0.0029254253022372723, 0.0041534658521413803, 0.0093065463006496429, 0.0050970036536455154, 0.0083133615553379059, 0.0035868266131728888, 0.0075728902593255043, 0.004275233019143343, 0.0045405528508126736, 0.001407835865393281, 0.0033378598745912313, 0.0050328015349805355, 0.0061873523518443108, 0.0051354141905903816, 0.006077401340007782, 0.0022482157219201326, 0.0061645549722015858, 0.0014277542941272259, 0.0024189050309360027, 0.0083355410024523735, 0.004801848903298378, 0.0032858909107744694, 0.0035781606566160917, 0.0060880603268742561, 0.0033568807411938906, 0.0047704833559691906, 0.0033011946361511946, 0.0013924093218520284, 0.0067955167032778263, 0.0036923475563526154, 0.0016683267895132303, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 8039, 25525, -565, 42330, 4170, 113544, -3559, 56357, 4828, 26300, 25959, -1898, -2314, 32885, -417, -2523, -53, 868, 4855, -1912, 1100, -2479, 793, -24537, -5497, 41863, 133014, 94995, 2751, 2709, -2747, -194, 22933, 57, 18585, -1521, 28815, 1251, 69391, 1293, -1393, 71772, -60, 6714, 45613, -831, 4792, 45589, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 6.6878492361865938e-05, 4.5213990233605728e-05, 0.00023431859153788537, 5.569478526012972e-05, 0.0001530245499452576, 9.5868155767675489e-05, 0.00011598719720495865, 9.7674252174329013e-05, 9.0530389570631087e-05, 4.1921368392650038e-05, 5.5182004871312529e-05, 0.00014492911577690393, 4.9964932259172201e-05, 4.101675222045742e-05, 0.00014628400094807148, 0.00016215539653785527, 0.00025935511803254485, 6.883353489683941e-05, 9.7728610853664577e-05, 0.00021897756960242987, 0.0001199295002152212, 0.00019560851796995848, 8.4395920566748828e-05, 0.00017818565538618714, 0.0001005937228910625, 0.00010683653817977756, 3.3125550544355065e-05, 7.8537879744544625e-05, 0.00011841885861940682, 0.00014558476686943322, 0.00012083327601430938, 0.00014299768372438848, 5.2899194997735322e-05, 0.00014504835417028517, 3.3594220440136269e-05, 5.691541446140036e-05, 0.00019613037875387818, 0.00011298467870801687, 7.7315082307904959e-05, 8.4192019130568951e-05, 0.00014324848598334938, 7.8985431173350662e-05, 0.00011224667105125263, 7.7675169450230896e-05, 3.2762571208877489e-05, 0.00015989450912456959, 8.687876834301278e-05, 3.9254748116945848e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -19,1,-25,13,25,1,3,110,-50,20,44,-4,15,-15,-15,11,13,-14,-11,-3,63,-3,19,127,-14,91,-5,-11,24,-15,25,-35,-15,50,16,-52,20,46,21,-17,-112,-23,19,41,34,24,-125,-50, 
  /* [1][0][][] */ -40,-14,16,16,-32,13,1,60,-57,-32,7,-45,-25,-16,-3,-8,-29,122,-13,19,6,7,-28,-17,24,-42,17,27,-29,-87,-33,18,-18,-6,30,-5,-4,-43,5,13,-19,-29,127,10,8,-5,22,-10, 
  /* [2][0][][] */ -22,-6,-14,-34,-1,-64,7,-19,2,10,11,28,13,17,-15,8,-5,-23,-20,-16,-1,1,-3,-127,-10,77,-13,6,-2,-16,-6,-8,-9,58,12,-1,18,9,27,15,-35,4,-16,-8,-1,-11,13,1, 
  /* [3][0][][] */ -6,30,-1,-28,0,-1,5,-5,-17,-5,-1,39,-127,3,-5,-1,1,5,-15,3,-28,11,8,17,-6,-12,5,23,-7,20,5,18,2,4,17,20,-12,27,40,3,13,4,26,-27,9,-3,5,17, 
  /* [4][0][][] */ 35,-30,7,10,17,28,22,-23,-33,8,-15,-18,0,13,0,12,20,-8,-83,6,-7,10,13,70,1,-25,6,49,9,-72,18,7,11,-32,29,-127,14,35,-1,18,-19,17,9,-23,-8,-21,5,5, 
  /* [5][0][][] */ 28,4,-20,58,-3,-5,5,26,5,-3,40,12,-1,55,0,3,-26,15,29,0,13,6,0,-30,3,-48,3,-18,-3,-4,-1,5,62,-127,10,30,-16,-15,17,11,-96,58,21,-6,-3,-5,-98,-12, 
  /* [6][0][][] */ 23,-1,3,4,-16,-4,2,-12,-5,8,0,2,-18,9,2,4,-1,-13,127,8,4,7,15,-35,3,4,24,-11,-13,-1,-6,7,1,-11,29,-38,2,-46,72,13,-1,-6,-8,5,-10,2,5,-11, 
  /* [7][0][][] */ -48,-11,-13,33,-13,81,-7,48,-4,32,-11,127,75,0,-12,-7,-8,-28,-10,-21,-31,-4,-20,66,4,-34,-51,-28,-15,-9,-16,-13,1,-2,-19,2,10,-63,100,-1,21,30,-56,-63,19,-11,-1,5, 
  /* [8][0][][] */ -45,-54,-1,4,-8,-2,3,28,-3,-73,1,43,57,3,11,10,-10,66,-29,12,-49,23,-2,-10,-4,-1,1,41,-7,125,-9,28,-7,8,-23,-127,-121,75,29,36,25,-11,114,-18,6,35,22,29, 
  /* [9][0][][] */ -24,3,-9,36,20,-33,-5,-1,58,-40,14,58,-51,7,6,6,-7,19,-30,-25,51,2,-9,-16,6,11,47,-24,14,8,8,1,-5,22,72,-101,-13,-127,-93,12,-27,24,41,9,-3,11,-14,-43, 
  /* [10][0][][] */ -25,-7,-37,-127,48,92,8,-9,4,37,27,14,46,-49,-35,18,31,-45,52,-32,31,-18,37,49,-52,-108,8,-30,48,37,42,-47,-26,-86,22,-9,14,-45,10,-39,-38,-61,-14,8,11,15,20,-40, 
  /* [11][0][][] */ 1,46,-10,57,30,-59,-81,-19,2,60,-15,-3,-3,51,-1,-69,23,45,8,-7,-50,-104,13,-6,7,-43,15,-21,60,-37,20,-75,48,-13,-39,-91,88,30,6,-127,-2,55,97,-67,-8,-56,37,34, 
  /* [12][0][][] */ 124,-2,-20,14,3,24,1,103,22,-12,-54,-20,-2,11,-11,-6,-7,4,-4,-7,4,0,2,16,1,15,-3,7,-6,12,-5,1,3,-65,-11,6,-17,-14,-26,-4,-16,-76,6,-127,-52,-16,80,5, 
  /* [13][0][][] */ 10,1,-3,7,7,-12,3,0,0,7,6,21,-3,3,6,2,7,1,11,4,12,-13,11,-2,2,1,18,127,10,-5,8,-2,5,1,-39,21,8,-7,4,-13,-12,-4,-5,8,-4,-1,-8,-15, 
  /* [14][0][][] */ 66,-30,53,-70,58,27,41,-103,-57,-61,-1,122,-68,-8,68,14,58,34,-50,66,23,11,76,-15,22,56,-37,-122,32,-41,66,49,-2,71,-127,-49,-37,47,88,6,-35,7,47,3,-8,5,18,-27, 
  /* [15][0][][] */ -12,-51,-78,-40,60,29,76,-50,-13,28,-14,-40,83,25,-109,59,60,49,78,-93,-114,-32,55,-13,-103,50,31,63,57,46,47,-58,30,51,105,127,-13,-120,-4,-44,96,73,117,-59,-4,-41,-22,73, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.02974470891058445, 0.038746453821659088, 0.057537958025932312, 0.046996921300888062, 0.035857543349266052, 0.046769037842750549, 0.040256526321172714, 0.024222051724791527, 0.023864958435297012, 0.037372440099716187, 0.032528705894947052, 0.02071903832256794, 0.056394543498754501, 0.066651932895183563, 0.014125864952802658, 0.027165487408638, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -42070, 1920, 1158, -7972, 475, -8590, -11340, -45155, 7478, 24450, 31222, -6663, -3791, -21217, 42369, -49731, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00069987552706152201, 0.00091168127255514264, 0.0013538342900574207, 0.0011058099335059524, 0.00084370689000934362, 0.0011004479601979256, 0.00094721239292994142, 0.00056993064936250448, 0.00056152843171730638, 0.00087935157353058457, 0.00076538132270798087, 0.00048750679707154632, 0.0013269304763525724, 0.0015682808589190245, 0.00033237331081181765, 0.00063918792875483632, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 51,-10,123,112,84,-37,48,-16,127,-27,-69,-63,37,93,-61,-77, 
  /* [1][0][][] */ 45,84,-1,-7,84,-24,18,37,50,48,-29,127,26,-21,79,-68, 
  /* [2][0][][] */ 10,-56,-2,15,-63,46,-86,86,-71,-97,1,94,-20,-127,104,-103, 
  /* [3][0][][] */ 111,127,-7,27,-114,-5,-50,-22,-10,-2,105,-62,-49,87,-45,-25, 
  /* [4][0][][] */ 2,-13,24,12,-27,29,-17,55,-67,-40,-2,-3,-2,-127,18,-3, 
  /* [5][0][][] */ 101,-41,-20,-3,-19,-108,-18,20,-9,13,-127,-25,17,-1,0,23, 
  /* [6][0][][] */ -112,-56,-21,85,-34,-15,-34,19,-127,-78,-56,-38,25,40,-4,101, 
  /* [7][0][][] */ -20,12,-86,46,50,-127,-39,32,9,-47,31,2,-22,15,-36,16, 
  /* [8][0][][] */ 39,-68,-4,-5,2,31,-62,-61,-3,12,-77,-2,-127,6,-1,30, 
  /* [9][0][][] */ 6,-42,92,127,-7,36,-11,-91,124,-89,-7,-37,-19,49,-71,16, 
  /* [10][0][][] */ -102,-69,-10,-24,105,40,41,74,127,-52,-65,25,98,-98,-91,78, 
  /* [11][0][][] */ 42,-9,-127,25,53,31,-19,44,-9,-29,-16,-7,-4,25,-41,-4, 
  /* [12][0][][] */ 118,-44,21,14,3,-46,-48,-13,44,6,-127,-14,-42,-5,-18,49, 
  /* [13][0][][] */ 14,-100,22,-78,83,34,-113,-127,32,-69,39,16,8,-21,19,20, 
  /* [14][0][][] */ -57,37,-83,-46,78,-127,68,-59,60,51,-18,-121,22,116,-22,19, 
  /* [15][0][][] */ 22,6,56,40,50,-55,-45,-20,22,-62,-73,-12,-127,-54,-10,53, 
  /* [16][0][][] */ -121,40,5,30,-2,127,38,86,-8,65,125,8,-32,35,0,-49, 
  /* [17][0][][] */ 1,-21,-32,-34,-27,13,74,94,-17,127,-19,14,5,91,53,2, 
  /* [18][0][][] */ -8,121,-65,-8,-8,-3,46,-94,42,127,-56,111,-8,-68,53,-119, 
  /* [19][0][][] */ 5,-15,33,14,-1,37,4,17,10,9,-54,-13,-127,-3,-13,31, 
  /* [20][0][][] */ 91,-59,-19,-93,-24,23,14,-98,-63,17,-127,-29,15,-2,66,8, 
  /* [21][0][][] */ 32,-18,127,38,-40,57,16,-8,2,36,-14,-22,-19,69,13,-12, 
  /* [22][0][][] */ 30,27,10,12,-18,-3,33,127,16,5,2,28,6,27,19,28, 
  /* [23][0][][] */ -15,14,-98,11,22,-127,0,30,-5,-36,-9,0,-56,1,-2,33, 
  /* [24][0][][] */ 46,-72,2,-66,59,-10,-20,-6,41,37,56,100,-46,97,127,47, 
  /* [25][0][][] */ -127,-107,-45,2,15,-2,3,-44,-71,-2,-95,16,29,36,27,61, 
  /* [26][0][][] */ 5,0,45,-15,-11,13,-33,67,-72,-63,-16,16,15,-127,44,-4, 
  /* [27][0][][] */ -86,46,-48,38,38,-19,-17,24,43,-50,127,37,-24,7,-5,-42, 
  /* [28][0][][] */ -24,-8,24,33,-4,2,7,72,28,9,-20,-14,-127,-12,-5,36, 
  /* [29][0][][] */ -7,68,44,-34,41,-12,29,-21,-127,35,-34,8,5,38,-93,9, 
  /* [30][0][][] */ 2,-10,-127,-16,28,-35,-13,16,-10,-15,2,-6,-45,-15,14,15, 
  /* [31][0][][] */ 127,-27,-106,13,57,5,-40,64,-8,-8,-78,-35,11,-6,-84,22, 
  /* [32][0][][] */ -121,20,29,54,31,100,18,45,29,2,127,8,-41,32,-17,-25, 
  /* [33][0][][] */ 1,-9,127,-16,-63,29,14,-32,-1,11,-10,22,-3,24,34,16, 
  /* [34][0][][] */ 45,-3,-55,-127,44,-29,49,28,-46,-81,-52,-100,17,16,13,21, 
  /* [35][0][][] */ -15,-32,39,45,61,-26,20,-30,-115,40,7,29,-25,127,-45,-35, 
  /* [36][0][][] */ -127,48,-41,-13,-31,32,44,78,-17,42,127,-32,-5,8,27,-11, 
  /* [37][0][][] */ -39,19,127,-26,-75,-61,29,-26,21,21,-3,7,4,-60,57,11, 
  /* [38][0][][] */ 9,-6,-3,43,34,-34,-53,13,-17,-11,75,-8,127,35,-18,1, 
  /* [39][0][][] */ -74,-43,-50,-79,-67,-127,65,105,-61,-19,7,-86,-23,41,90,87, 
  /* [40][0][][] */ 64,-6,-18,-13,-12,86,-10,11,18,-1,18,-5,127,12,-24,-20, 
  /* [41][0][][] */ 8,-17,-47,-127,29,-19,-24,-68,5,-51,3,-40,4,-17,-22,37, 
  /* [42][0][][] */ 41,60,-1,93,-127,13,-96,7,-84,-65,78,-90,-18,121,-43,26, 
  /* [43][0][][] */ 10,117,-29,127,17,28,48,-69,-36,88,-11,25,6,-41,46,31, 
  /* [44][0][][] */ -15,-34,-127,16,48,71,-49,47,-18,-17,41,-27,-2,-30,-47,5, 
  /* [45][0][][] */ 0,38,-11,-127,-30,8,72,2,-18,29,-41,23,13,-126,40,-54, 
  /* [46][0][][] */ 5,31,52,-16,10,8,-44,51,23,-43,-31,2,11,127,45,-8, 
  /* [47][0][][] */ 15,-19,33,-26,-34,26,-71,59,6,-33,20,43,6,-127,51,6, 
  /* [48][0][][] */ 0,-9,7,-127,-13,-15,-5,8,12,-28,12,-22,7,46,-7,59, 
  /* [49][0][][] */ 35,-38,-13,120,80,5,-2,48,-49,12,31,29,-7,37,127,-6, 
  /* [50][0][][] */ -23,-15,75,-15,1,127,-13,-45,49,-20,119,23,110,14,-19,-53, 
  /* [51][0][][] */ 19,49,11,6,20,3,-30,20,33,-6,10,127,4,21,22,-43, 
  /* [52][0][][] */ -22,55,116,8,27,-41,13,-55,-35,8,15,23,-4,92,-127,-27, 
  /* [53][0][][] */ -3,-31,-42,-127,-38,2,16,-39,-21,40,25,3,21,-24,47,14, 
  /* [54][0][][] */ 7,-15,-34,-38,20,34,-34,5,45,-15,14,-19,-21,127,17,39, 
  /* [55][0][][] */ -8,-31,-50,-15,16,-54,-13,-127,3,-111,-25,-5,-43,-88,-61,-20, 
  /* [56][0][][] */ 40,42,31,60,0,-23,17,127,18,-22,1,-44,70,-8,-41,30, 
  /* [57][0][][] */ 66,-33,127,-21,-57,-55,-2,-28,26,17,-98,28,49,-38,46,11, 
  /* [58][0][][] */ 102,109,29,111,-127,-15,2,64,-19,19,94,-27,-56,-50,-30,-72, 
  /* [59][0][][] */ 126,-51,-9,-2,-31,-19,5,16,-23,33,-127,-19,17,-6,0,22, 
  /* [60][0][][] */ -127,39,-2,0,12,17,24,35,14,11,90,-1,-39,3,12,-18, 
  /* [61][0][][] */ -125,42,23,4,34,-30,-69,-52,127,-102,70,-8,62,-34,-99,-63, 
  /* [62][0][][] */ -10,-45,-127,64,57,91,3,97,28,-41,28,-20,-66,7,-98,3, 
  /* [63][0][][] */ -45,20,127,-44,-56,-54,24,-27,12,9,-4,16,-14,-46,70,12, 
  /* [64][0][][] */ 50,70,2,51,111,15,109,-127,-7,125,4,22,-22,-107,-27,43, 
  /* [65][0][][] */ 2,23,-9,-36,65,-1,19,-127,-30,-47,-26,-60,-2,-48,33,30, 
  /* [66][0][][] */ -127,-4,-21,2,-38,17,16,-42,-79,-33,-70,46,47,19,46,81, 
  /* [67][0][][] */ 6,-46,-2,127,24,-1,-25,47,38,24,-4,-2,-23,-30,-111,-17, 
  /* [68][0][][] */ 8,4,-15,127,-60,-13,5,-34,-55,26,23,-31,-27,-70,-23,-47, 
  /* [69][0][][] */ 117,90,23,127,60,-21,82,-111,17,117,15,52,3,-9,9,-3, 
  /* [70][0][][] */ 7,-40,-12,-113,124,-30,67,16,99,-25,92,-56,5,105,82,127, 
  /* [71][0][][] */ 10,55,-10,90,44,-127,-37,91,55,-80,14,12,18,-48,-44,38, 
  /* [72][0][][] */ -127,-70,-8,54,25,44,-28,30,-52,-34,-101,47,59,26,-6,96, 
  /* [73][0][][] */ -16,-30,-14,103,26,-25,-7,-20,85,11,3,9,18,127,-74,-61, 
  /* [74][0][][] */ 73,-25,8,-24,-49,-14,43,-17,-36,1,-115,27,-127,-17,40,50, 
  /* [75][0][][] */ -17,-25,-30,127,-37,4,7,-18,-62,28,-24,-40,-1,-47,-12,-24, 
  /* [76][0][][] */ -3,-7,-2,39,32,18,-11,-118,17,-127,15,24,-18,-24,35,-41, 
  /* [77][0][][] */ 127,-45,25,49,-46,-14,-43,-15,48,-4,-44,43,45,10,-46,37, 
  /* [78][0][][] */ -17,-5,49,0,7,8,-63,26,43,-12,-33,-54,-6,127,39,-24, 
  /* [79][0][][] */ 2,16,49,22,48,65,-53,-51,10,-49,73,-14,127,-23,-31,-43, 
  /* [80][0][][] */ -95,-77,-63,127,22,49,46,1,-103,32,-89,32,51,-66,-29,38, 
  /* [81][0][][] */ 67,3,-70,35,127,95,-25,-39,-15,-99,-17,-80,-30,-16,-103,34, 
  /* [82][0][][] */ 111,88,-3,50,-127,-34,-83,-40,-58,-4,103,-67,-58,81,10,-44, 
  /* [83][0][][] */ 127,40,10,-29,6,-15,-14,26,35,16,94,-39,-60,-33,-23,-84, 
  /* [84][0][][] */ 36,-60,-58,-25,51,16,-13,-127,-25,-65,20,23,-16,-2,-7,-15, 
  /* [85][0][][] */ -18,-1,-32,-34,1,13,74,95,-8,127,-7,-36,36,70,57,-31, 
  /* [86][0][][] */ 88,-32,2,-7,0,-40,-11,-22,0,-8,-127,3,18,16,-7,18, 
  /* [87][0][][] */ -26,48,29,-38,-20,104,-13,69,-1,-21,43,5,14,-127,12,14, 
  /* [88][0][][] */ 5,-28,-114,-44,54,-19,-34,-127,13,-19,-27,-41,-29,6,34,-13, 
  /* [89][0][][] */ 9,4,21,-127,31,7,-46,70,56,-73,13,12,-29,23,33,41, 
  /* [90][0][][] */ -35,-14,-33,51,62,-6,104,-85,70,127,-33,33,16,5,-11,-16, 
  /* [91][0][][] */ 51,-18,-32,-8,-3,-127,-8,0,-3,-1,-57,-13,33,-6,0,41, 
  /* [92][0][][] */ 26,-28,127,73,15,10,-9,32,-17,41,-55,-3,19,99,23,-4, 
  /* [93][0][][] */ 127,-24,-41,-26,-31,-70,2,26,-44,22,-124,-13,-12,6,1,63, 
  /* [94][0][][] */ 10,-13,53,75,123,-28,-16,66,1,-22,4,64,-13,127,-31,-75, 
  /* [95][0][][] */ -122,51,42,36,10,47,11,1,9,-1,127,4,-22,30,-9,-26, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00068148691207170486, 0.0011429338483139873, 0.0005344833480194211, 0.0042433370836079121, 0.0010594803607091308, 0.00052464153850451112, 0.00089399062562733889, 0.0016462524654343724, 0.00097809638828039169, 0.00045908719766885042, 0.00084525387501344085, 0.001383246504701674, 0.0012740684906020761, 0.00039489465416409075, 0.00074542075162753463, 0.0010429220274090767, 0.00054199987789615989, 0.00050200667465105653, 0.00072976609226316214, 0.0021222548093646765, 0.00093686656327918172, 0.00064029358327388763, 0.00094631948741152883, 0.00073142955079674721, 0.00062563852407038212, 0.0013714204542338848, 0.0010204780846834183, 0.00050561240641400218, 0.0023790039122104645, 0.00098706304561346769, 0.00085142254829406738, 0.00053984945407137275, 0.00031876596040092409, 0.0019824283663183451, 0.00076593749690800905, 0.0012970491079613566, 0.00039218663005158305, 0.0009761410765349865, 0.0014280762989073992, 0.000593349221162498, 0.0019081643549725413, 0.00047576316865161061, 0.00064264086540788412, 0.00057020457461476326, 0.0011009324807673693, 0.00077511317795142531, 0.00068284088047221303, 0.001114536658860743, 0.0010773077374324203, 0.00079688848927617073, 0.0012138484744355083, 0.0033568786457180977, 0.0003939906891901046, 0.00075092841871082783, 0.0010197795927524567, 0.00029268278740346432, 0.0010409028036519885, 0.00076202035415917635, 0.00075587513856589794, 0.0011025049025192857, 0.00040768779581412673, 0.00053857156308367848, 0.0011378944618627429, 0.0010884059593081474, 0.00060125597519800067, 0.00083293148782104254, 0.0014585949247702956, 0.0013819263549521565, 0.00039397916407324374, 0.00053686485625803471, 0.00055268855066969991, 0.0011046727886423469, 0.0010244474979117513, 0.0014110930496826768, 0.00065122131491079926, 0.0010748266940936446, 0.00036003722925670445, 0.0010280809365212917, 0.00052508863154798746, 0.0012935459380969405, 0.0006308366428129375, 0.0012078469153493643, 0.00088787276763468981, 0.0021028839983046055, 0.00074834580300375819, 0.00087849877309054136, 0.0007270239875651896, 0.0010524840326979756, 0.00039129698416218162, 0.0014760756166651845, 0.00072606321191415191, 0.0012157072778791189, 0.00048362644156441092, 0.00036098272539675236, 0.00086937908781692386, 0.00064304802799597383, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 11733, 757, 7668, -409, 4701, 5393, 10650, 6578, -1401, 12011, 5110, 1777, 6634, 37377, -430, -2057, 12755, 14339, 1832, -210, -896, 11976, 4941, 3309, 8695, 4658, 4296, 5804, 43, 15, 5229, 10759, 19129, 1689, 6649, -710, 17870, 8322, 999, 5070, 797, 12119, 10157, 3920, 3114, 12933, 12875, 4001, 4509, 3359, 339, -585, 20930, 6302, 6999, 19695, -355, 6943, 3239, 4521, 12756, 8127, 2823, 7805, 5443, 4186, 4090, -786, 21288, 6662, 10961, -1318, -1121, 2803, 1855, 3702, 19925, 13461, 9901, -2893, 5450, -5269, -1306, 364, 6628, 5532, 7034, 3970, 13304, 3308, 6140, 4292, 13505, 23278, -10390, 15465, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00022190315939951688, 0.00037215775228105485, 0.00017403642414137721, 0.0013816992286592722, 0.00034498394234105945, 0.00017083177226595581, 0.00029109782190062106, 0.00053604645654559135, 0.00031848400249145925, 0.00014948622265364975, 0.00027522834716364741, 0.0004504074458964169, 0.00041485732072032988, 0.00012858408445026726, 0.00024272105656564236, 0.00033959228312596679, 0.00017648392531555146, 0.00016346148913726211, 0.0002376236516283825, 0.00069104047724977136, 0.00030505890026688576, 0.00020848994608968496, 0.00030813695047982037, 0.00023816530301701277, 0.00020371802384033799, 0.00044655668898485601, 0.00033228416577912867, 0.00016463558131363243, 0.00077464216155931354, 0.00032140369876287878, 0.00027723694802261889, 0.0001757837162585929, 0.00010379535524407402, 0.00064551073592156172, 0.00024940163712017238, 0.00042234017746523023, 0.00012770231114700437, 0.00031784732709638774, 0.00046500476310029626, 0.00019320410501677543, 0.00062132917810231447, 0.00015491618250962347, 0.0002092542708851397, 0.00018566784274298698, 0.00035848142579197884, 0.00025238940725103021, 0.00022234403877519071, 0.00036291117430664599, 0.00035078881774097681, 0.0002594797988422215, 0.00039524870226159692, 0.0010930539574474096, 0.00012828974286094308, 0.00024451443459838629, 0.00033205674844793975, 9.5302253612317145e-05, 0.00033893479849211872, 0.00024812616175040603, 0.00024612518609501421, 0.00035899344948120415, 0.00013274974480737001, 0.00017536761879455298, 0.00037051684921607375, 0.00035440258216112852, 0.00019577867351472378, 0.00027121597668156028, 0.0004749421204905957, 0.00044997758232057095, 0.00012828598846681416, 0.00017481188115198165, 0.00017996433598455042, 0.00035969933378510177, 0.00033357669599354267, 0.00045947474427521229, 0.00021204819495324045, 0.0003499809536151588, 0.00011723394709406421, 0.00033475979580543935, 0.00017097734962590039, 0.00042119948193430901, 0.00020541061530821025, 0.00039329449646174908, 0.000289105752017349, 0.00068473303690552711, 0.00024367350852116942, 0.00028605342959053814, 0.00023673077521380037, 0.00034270584001205862, 0.00012741262617055327, 0.00048063410213217139, 0.00023641792358830571, 0.00039585397462360561, 0.00015747659199405462, 0.00011754181468859315, 0.00028308390756137669, 0.00020938683883287013, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -16,5,-20,103,-17,24,-61,-53,18,-6,100,-9,4,-7,-5,54,5,18,-34,3,74,3,32,-33,3,17,43,47,20,13,25,47,-8,27,6,-15,5,48,-57,-29,20,10,26,18,-84,-61,24,-5,-11,-19,-8,-7,50,5,-9,1,-3,-35,27,-31,26,-4,127,26,-13,-10,13,-54,65,36,2,-9,79,-31,69,3,17,-127,29,63,1,14,127,-15,37,28,-31,-20,35,-7,-15,80,1,19,-2,13, -47,13,-8,9,53,-8,-10,-127,39,13,-127,-4,-16,-10,3,90,18,-28,-15,-15,77,-96,127,27,-62,-31,-105,-18,26,36,-49,17,117,12,-14,-1,-24,127,-63,-127,9,-19,-30,14,46,-127,127,-45,-76,50,49,7,39,-63,33,56,36,42,-102,84,127,32,4,-21,42,-38,-98,-2,37,-31,-19,43,-49,-47,105,-4,-29,-59,-34,63,-67,60,-14,8,-11,47,54,-40,-28,53,-13,70,-127,-32,23,-127, 0,-5,-23,-74,8,18,38,20,-2,-4,5,62,0,-13,-12,6,-13,21,-19,17,5,25,24,-33,1,-31,10,10,-8,5,46,-79,42,17,11,-22,12,4,-33,-24,7,3,-15,7,22,-32,21,1,7,-9,6,-5,5,6,-4,8,-7,45,7,-3,11,-18,2,-17,-28,-17,29,-53,-107,-8,41,-19,-127,-21,-11,15,11,-10,5,12,-15,22,-35,-4,-42,20,26,35,-25,-16,25,-12,18,6,-2,-45, 
  /* [0][1][][] */ -39,61,-18,37,-86,-16,-10,-44,26,96,-45,-21,-31,-24,-7,63,127,-23,-89,-14,60,-127,-29,17,-35,-47,-127,-7,36,37,-49,26,-127,-76,-58,3,67,-3,-48,44,-19,87,0,-3,35,-55,-13,-32,127,44,-3,20,45,9,-36,-17,31,10,-126,127,-36,-89,21,127,-60,-37,-82,127,-37,127,-19,51,-36,-53,37,7,-35,-69,127,47,127,35,7,-1,127,29,-98,46,-38,-35,-106,40,98,101,29,-58, 127,127,127,127,-46,-127,127,24,127,-127,16,-127,-107,127,127,127,-16,-127,-68,-127,127,22,-68,127,127,127,-55,-127,127,127,-127,127,-8,-127,-123,127,-127,-44,92,109,-127,-127,127,127,127,-120,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,40,-103,-27,-71,-67,127,127,-69,127,127,-107,-127,127,-42,127,-127,-127,-127,125,-76,127,-43,127,80,127,-38,-127,-25,-105,-127,-125,-24,-127,-21,-127,-127,118, -23,67,-38,2,127,70,-21,47,6,23,-12,-5,-26,-31,-14,-7,-104,-19,-127,38,31,76,-13,-116,-34,-40,125,68,9,36,72,9,123,-48,127,-4,56,5,-95,10,35,23,-22,1,-23,-54,-13,-42,81,14,-11,40,-6,-4,-72,-14,25,20,127,-90,2,127,0,-36,-112,-29,-76,97,15,-18,112,22,-16,-55,11,44,-28,-6,-45,-2,-48,7,47,24,-91,35,127,-46,33,-21,127,-10,-113,35,33,19, 
  /* [0][2][][] */ -4,-39,-21,-60,-5,14,42,31,-2,10,-19,52,23,-33,-7,6,41,5,12,22,-9,29,-17,-25,2,-23,9,2,-10,-7,50,-75,-38,68,-30,-25,33,-35,-60,17,9,10,-34,19,13,-82,-12,-1,-10,7,17,-8,8,1,-22,6,-1,43,-49,34,-6,-13,5,17,-6,-10,23,-53,-57,12,-22,-13,-119,-30,0,17,14,-12,55,17,23,21,-39,16,12,25,-22,9,6,24,23,-6,22,39,-7,-29, -26,-7,-27,24,-45,73,-25,65,6,-5,55,-12,127,-6,-19,-18,0,-37,-59,25,-22,78,-45,-110,-47,-46,102,66,14,43,54,-2,-122,64,-12,-23,-28,-26,-127,-3,44,-13,-15,36,-26,-43,-19,-48,-61,28,69,25,-11,-79,31,52,17,26,77,-55,20,-57,-8,1,19,-26,-127,-57,-11,-27,-63,20,37,-45,-30,-7,-44,24,-58,1,50,34,19,11,5,62,-92,127,16,127,-30,-18,113,-22,47,83, -9,-34,-26,27,13,64,-43,13,5,-7,1,14,12,-51,-11,-13,-43,-1,19,21,-24,6,-21,4,-3,20,-3,50,-3,-6,35,28,16,43,22,-23,-6,-26,-35,6,10,-12,22,9,-73,-31,-13,4,-2,-16,-1,-4,-9,9,-16,-5,-1,-49,13,-29,-21,49,9,-29,-10,-2,35,-58,45,6,55,-22,31,-54,-20,21,11,12,-6,23,-31,31,89,-14,-20,54,39,-8,108,12,3,-19,8,-22,-7,-51, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0079251360148191452, 0.0060345963574945927, 0.010611407458782196, 0.0020821930374950171, 0.0071352780796587467, 0.0079787503927946091, 0.014444583095610142, 0.0031317293178290129, 0.0044646915048360825, 0.016996460035443306, 0.0061679729260504246, 0.015665501356124878, 0.004759117029607296, 0.018095042556524277, 0.006063646636903286, 0.0048896814696490765, 0.0044314134865999222, 0.015749994665384293, 0.0028859507292509079, 0.0079328380525112152, 0.0020042336545884609, 0.0073598525486886501, 0.0083652650937438011, 0.013745497912168503, 0.0089766727760434151, 0.0097818998619914055, 0.0058076512068510056, 0.012363076210021973, 0.0050816573202610016, 0.0047423234209418297, 0.0045085428282618523, 0.0077690840698778629, 0.0051909852772951126, 0.0043794834055006504, 0.0077608539722859859, 0.0094029996544122696, 0.018531084060668945, 0.0051466603763401508, 0.0034556346945464611, 0.0071463226340711117, 0.009149615652859211, 0.011600956320762634, 0.016176929697394371, 0.0068964604288339615, 0.0082304049283266068, 0.0037072165869176388, 0.0088514406234025955, 0.0080525195226073265, 0.0028434235136955976, 0.0093857450410723686, 0.0093592191115021706, 0.009588104672729969, 0.0092397760599851608, 0.0090620694682002068, 0.0084555186331272125, 0.017834214493632317, 0.022710906341671944, 0.0099383341148495674, 0.0052044973708689213, 0.0042996834963560104, 0.010557452216744423, 0.0074329436756670475, 0.01217797864228487, 0.0054859570227563381, 0.0092695821076631546, 0.0057162586599588394, 0.0044862786307930946, 0.0036973371170461178, 0.017000142484903336, 0.011282104067504406, 0.0062054479494690895, 0.0067229182459414005, 0.0076713096350431442, 0.0067664841189980507, 0.0073388447053730488, 0.011025090701878071, 0.020493678748607635, 0.0024231697898358107, 0.0097321793437004089, 0.013098712079226971, 0.0072543080896139145, 0.019902611151337624, 0.0064401263371109962, 0.006242790725082159, 0.0057105068117380142, 0.0040669757872819901, 0.0068880105391144753, 0.0064974618144333363, 0.007256816141307354, 0.0056089903227984905, 0.007548243273049593, 0.0061018848791718483, 0.0059281783178448677, 0.0212832260876894, 1.1813704967498779, 0.0031731121707707644, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 9688, -7939, 3505, 42346, -1041, -4571, -10774, 3849, -2482, 1096, 2687, -1304, 518, -6399, 7188, -6309, -2420, 16085, 23012, 2459, 4266, -2409, 1410, -604, 16423, -1292, -1005, -2255, -4742, -7684, 8651, -8803, -50, -2091, -901, 10400, 1220, -3190, 19397, 443, -197, 1771, -9353, -7544, -7241, 68389, -93, 17899, 40868, -12442, 119, 6283, 7314, -179, -7839, 2337, -7946, 1875, 1948, -5312, -1885, -298, -13381, -149, 1854, 20948, 28420, 20411, -11495, 411, -13972, -677, 32628, 9996, 1004, 988, 17880, 30677, 37, -6395, -1810, -4461, 329, -2800, 1191, 1240, 1671, -544, 1402, -2997, -140, 1465, -370, 729, 44, 51374, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00018647378601599485, 0.00014199050201568753, 0.00024968018988147378, 4.8992777010425925e-05, 0.00016788889479357749, 0.0001877353060990572, 0.00033987255301326513, 7.3687748226802796e-05, 0.00010505156387807801, 0.00039991672383621335, 0.00014512878260575235, 0.00036860004183836281, 0.00011197922867722809, 0.00042576572741381824, 0.00014267403457779437, 0.00011505133443279192, 0.00010426855442347005, 0.00037058812449686229, 6.7904722527600825e-05, 0.00018665501556824893, 4.7158438974292949e-05, 0.00017317300080321729, 0.00019682977290358394, 0.00032342347549274564, 0.0002112158399540931, 0.0002301623608218506, 0.0001366506185149774, 0.00029089592862874269, 0.0001195684089907445, 0.00011158408597111702, 0.00010608336015138775, 0.00018280198855791241, 0.00012214083108119667, 0.00010304667375748977, 0.0001826083316700533, 0.0002212470571976155, 0.00043602552614174783, 0.00012109789531677961, 8.1309051893185824e-05, 0.0001681487774476409, 0.00021528507932089269, 0.00027296369080431759, 0.00038063366082496941, 0.0001622696581762284, 0.0001936565968208015, 8.7228625488933176e-05, 0.00020826919353567064, 0.0001894710585474968, 6.6904081904795021e-05, 0.00022084105876274407, 0.00022021692711859941, 0.00022560247452929616, 0.0002174065011786297, 0.00021322516840882599, 0.0001989533775486052, 0.00041962857358157635, 0.00053437426686286926, 0.00023384316591545939, 0.00012245876132510602, 0.00010116902558365837, 0.0002484106516931206, 0.00017489278980065137, 0.00028654068592004478, 0.00012908133794553578, 0.00021810781618114561, 0.00013450020924210548, 0.00010555949847912416, 8.699616591911763e-05, 0.00040000336593948305, 0.00026546127628535032, 0.00014601054135710001, 0.00015818631800357252, 0.00018050140351988375, 0.00015921139856800437, 0.00017267870134674013, 0.00025941390777006745, 0.00048220422468148172, 5.7015760830836371e-05, 0.00022899245959706604, 0.00030820499523542821, 0.00017068960005417466, 0.00046829675557091832, 0.00015153238200582564, 0.00014688920055050403, 0.00013436486187856644, 9.5693547336850315e-05, 0.00016207083535846323, 0.00015288146096281707, 0.00017074862262234092, 0.0001319762523053214, 0.00017760573246050626, 0.00014357376494444907, 0.00013948655396234244, 0.00050078181084245443, 0.027796953916549683, 7.4661467806436121e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 2,24,-14,22,40,68,-34,-27,41,-2,13,2,-11,8,18,68,0,-8,-6,-9,93,-50,5,-19,-23,-40,-44,-95,-3,-6,48,41,112,-7,0,0,7,-21,-22,2,-34,16,19,-27,-2,-26,-16,21,-14,20,-1,-12,-37,-16,11,-4,39,21,-15,-31,-62,20,-13,-5,8,5,52,4,13,-1,-3,-23,-66,0,2,0,-3,-86,2,-20,38,-20,-59,-46,32,-14,10,26,-4,-2,25,-26,19,17,-15,127, 
  /* [1][0][][] */ 82,-103,43,92,-16,-65,-15,-45,-27,-109,0,28,2,-78,-44,-49,-94,0,32,21,-44,-110,-48,23,127,-82,-88,13,-36,105,-14,53,6,8,-46,33,-21,1,49,-28,-4,-81,75,-41,-64,16,54,-11,48,20,-19,-73,64,-92,42,-20,35,28,-6,-116,38,-75,14,-56,0,-97,31,43,42,61,-45,9,-111,35,-16,77,36,96,13,-19,41,12,-93,33,-91,64,-2,61,-45,8,31,6,3,-49,38,-4, 
  /* [2][0][][] */ 30,20,7,-23,-1,-12,-2,25,59,-14,9,73,-3,14,52,5,-26,-20,11,-6,-21,-71,4,-49,-9,-7,-32,32,0,17,119,-53,6,-82,-42,41,17,127,-47,-15,11,-13,-11,37,-51,-46,-44,17,30,33,-26,-35,28,8,-21,-27,-25,-7,-5,32,-3,0,75,93,5,-78,21,-67,-8,-24,-9,28,-26,2,-22,8,18,52,2,11,22,81,37,-21,-17,0,-15,2,21,-3,-6,-51,-51,-6,-3,55, 
  /* [3][0][][] */ -14,-13,-32,41,32,-24,2,-25,-13,19,14,12,13,-2,55,-10,42,-45,7,12,-11,-21,-7,14,-22,16,14,6,30,-52,58,-20,16,-15,-14,44,-16,-7,-5,15,16,-67,29,-22,-1,3,6,-5,-127,45,-8,25,-116,-52,-28,-35,26,14,-12,59,-5,25,12,26,-15,-88,-31,34,62,17,3,37,-46,15,-12,-48,-51,-58,30,-44,19,-24,25,74,40,58,29,19,35,-4,-8,8,-26,-1,-20,-31, 
  /* [4][0][][] */ -2,-33,19,-66,-6,-10,-49,7,-17,-47,-22,-9,0,71,2,8,57,-13,6,3,-4,27,60,5,-5,-7,15,17,5,-13,-1,-17,-41,8,-1,18,43,-26,-6,-7,17,9,-97,-31,24,-10,-6,-14,11,85,-9,-21,-19,-17,-1,-12,1,-35,27,31,13,-5,3,-4,33,-111,17,-19,-46,7,-17,-10,-20,12,-14,29,-24,54,51,1,18,2,127,-40,40,-6,-14,-1,64,9,0,19,-39,33,-8,-53, 
  /* [5][0][][] */ -5,2,-8,-5,-7,-14,5,109,54,-15,-14,-22,-16,32,49,30,-22,-15,-4,-37,-47,-23,-7,-44,4,14,24,88,76,1,68,47,-64,4,-12,-12,-54,-42,-32,-1,-30,-13,-14,-13,56,16,16,6,12,17,-4,2,-31,-8,-8,-2,-21,-24,0,35,-55,29,-26,-38,9,12,-18,10,1,7,3,20,20,5,7,-12,-7,27,7,113,2,-47,32,22,-2,-8,4,-29,-5,-25,24,-127,-36,-30,-9,-114, 
  /* [6][0][][] */ -22,-4,-14,-50,-7,-28,-14,19,-6,18,-20,1,34,-61,7,-3,-11,-63,30,6,0,-5,-22,19,72,-9,-3,-1,23,-6,14,-12,-26,-5,-31,4,16,3,22,36,-5,-21,-56,-23,-9,-19,23,-127,23,35,15,5,6,2,-12,-46,33,-11,2,4,15,29,-1,9,35,60,27,-17,-23,-14,11,-15,12,10,44,-11,-31,31,0,5,-15,-1,47,-36,-5,37,11,-21,15,5,-37,-11,-25,4,-4,16, 
  /* [7][0][][] */ 19,17,32,-20,-9,-3,-8,-25,-7,-15,-19,-12,-13,-95,26,8,-12,-38,-15,-12,8,-23,-39,-7,-29,-13,-2,-18,15,10,10,2,-19,0,-20,-16,0,-11,-32,24,6,-8,-27,33,-9,16,-17,73,3,28,-17,-31,-28,4,-11,-51,44,-4,1,-2,-8,5,-15,-3,-24,38,17,-24,-14,-11,4,47,-15,-7,-8,4,50,7,-6,-26,5,-38,38,-6,-38,127,-15,-2,-37,-25,-1,15,-30,-6,-8,5, 
  /* [8][0][][] */ -66,36,-51,6,42,-7,-16,27,16,81,-39,17,29,38,68,-14,-12,30,-68,26,22,26,-34,4,-40,-23,12,21,40,-96,0,-14,21,4,-1,-9,-14,34,-43,48,13,28,1,-127,-39,-17,41,-21,-45,37,5,55,-95,83,9,-5,5,-20,-20,-28,13,-39,9,30,-21,37,28,-20,-13,-9,39,85,-23,30,43,33,-16,-97,3,-40,-8,-19,32,7,-53,10,-7,-47,2,38,-28,-4,31,-15,-14,-31, 
  /* [9][0][][] */ 24,-63,-33,-39,13,18,-25,23,28,-12,-2,15,-40,-20,15,20,-9,6,46,-19,-25,-5,-28,-41,34,18,32,-8,-36,-33,-18,-1,-1,18,17,33,4,39,-28,25,12,10,-19,-95,8,-13,26,-127,-35,-6,-1,29,-12,7,-15,8,-47,25,-16,15,16,20,15,22,28,116,30,45,4,-12,10,-24,-3,-1,-39,15,68,-5,18,16,-17,6,16,-41,1,21,-10,5,-45,41,-36,-5,1,8,2,-21, 
  /* [10][0][][] */ 33,55,-25,36,65,-124,-11,-24,-1,48,25,-11,-16,22,13,-88,14,35,-21,36,-94,-15,-15,-36,-71,-31,-61,46,21,11,6,46,-13,-19,21,-10,74,-20,-8,-10,-20,71,48,-29,-61,-9,-45,7,-25,-17,-44,-7,-17,-17,6,-8,15,25,-26,-15,-5,5,-20,25,6,40,62,32,21,-4,24,62,-57,-20,-56,-20,6,34,-22,8,31,-7,-67,-36,61,-58,98,-15,-18,8,25,-16,79,33,-10,-127, 
  /* [11][0][][] */ 39,38,-30,23,-3,16,51,3,0,-10,-22,-5,5,8,40,6,0,-6,-99,-4,5,7,8,-3,-45,-13,-5,7,0,20,-1,-14,-10,5,4,18,4,11,-6,26,7,25,57,-95,33,-43,8,-3,-127,10,15,-54,29,24,-17,8,-16,-10,9,0,14,-15,-10,11,-44,56,-19,11,15,-9,26,15,-48,-29,9,27,-9,-43,-45,8,15,0,90,48,8,-10,-17,-8,-1,27,-16,-4,-1,4,-20,11, 
  /* [12][0][][] */ -29,-6,4,6,-24,39,4,-7,127,-9,-3,5,7,-1,-33,-37,26,28,11,80,49,28,-1,-20,5,-1,19,-32,-105,4,39,-39,8,2,-8,-18,26,-3,32,-13,-56,-19,2,9,-3,18,5,-15,20,4,-48,26,21,-15,9,7,68,-28,9,14,20,-25,16,-12,-13,19,-36,8,-4,5,-19,-27,11,9,-66,6,23,-12,10,-61,-8,10,44,39,-18,-9,-27,-18,7,17,2,43,-18,-15,16,3, 
  /* [13][0][][] */ 29,-17,-25,26,34,-2,12,0,-6,5,10,2,13,-4,14,-19,16,-74,-36,12,-8,-18,10,6,6,13,1,-3,-13,-34,-7,18,0,7,3,42,17,3,9,18,3,6,21,35,17,15,-9,-127,19,-6,7,7,-14,-1,17,8,-13,17,26,6,8,18,-4,5,-8,-17,-20,-52,7,17,-7,-34,-17,41,-7,23,-26,4,18,-3,29,-18,-12,17,15,29,10,20,-2,2,21,-7,4,13,-12,-11, 
  /* [14][0][][] */ -110,-54,29,44,26,-20,-30,12,-14,8,-12,4,51,4,-127,-3,72,-12,-12,28,-12,0,35,19,-93,9,30,-14,-40,-65,-33,5,8,15,31,-53,28,27,8,14,17,26,4,-27,22,112,63,57,-103,44,10,33,-48,-6,34,-6,8,15,53,54,34,46,12,37,2,-11,-42,38,6,72,-48,-96,-65,0,-7,43,-9,40,84,7,43,19,18,30,38,13,64,37,20,42,59,-5,3,31,19,-22, 
  /* [15][0][][] */ 80,-31,35,5,-10,85,28,-18,-16,40,5,-8,-92,-29,-22,32,11,42,48,-21,6,35,-86,58,25,-1,41,-6,27,48,-59,-74,18,-42,47,7,40,-39,-59,-101,-9,36,-1,35,1,49,-28,-37,111,-41,-49,25,39,-127,62,-100,5,-55,10,19,-119,-9,14,17,72,-28,-50,33,-33,71,-32,13,45,19,17,-1,23,-49,59,-9,-15,0,31,83,-10,3,11,-39,-2,-20,61,1,-65,68,19,-8, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.01891261525452137, 0.0081906337291002274, 0.011683795601129532, 0.010222561657428741, 0.014423218555748463, 0.01610887423157692, 0.013613478280603886, 0.014331908896565437, 0.0080721369013190269, 0.0130268894135952, 0.015621746890246868, 0.02721271850168705, 0.019646808505058289, 0.017717704176902771, 0.023278683423995972, 0.015418729744851589, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -908, 912, -3849, 31174, 28437, 8756, -3085, -1385, 24506, 785, 31413, 22853, -8891, 13508, 29849, -27214, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00044500271906144917, 0.00019272079225629568, 0.00027491283253766596, 0.00024053086235653609, 0.00033936984254978597, 0.00037903233896940947, 0.00032031713635660708, 0.00033722139778546989, 0.00018993263074662536, 0.00030651505221612751, 0.00036757052293978631, 0.00064029928762465715, 0.00046227785060182214, 0.00041688716737553477, 0.00054773373994976282, 0.0003627936530392617, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -3,67,-23,74,27,22,13,-18,50,30,-66,110,7,-127,51,-123, 
  /* [1][0][][] */ 19,51,-7,-24,32,-19,127,-105,-5,79,-11,-14,-7,-49,14,5, 
  /* [2][0][][] */ -127,18,-51,-49,-19,-31,34,72,-12,72,122,-35,-67,5,53,-75, 
  /* [3][0][][] */ -50,58,41,68,-47,54,78,127,19,65,-116,46,52,-58,-68,-46, 
  /* [4][0][][] */ 11,-5,46,73,-24,70,1,50,15,-9,-1,-9,19,3,-127,-29, 
  /* [5][0][][] */ -7,-20,55,-16,6,-28,-4,33,-65,103,-29,-127,-9,29,-62,-19, 
  /* [6][0][][] */ 20,3,37,-6,44,62,-73,-67,3,-6,40,-9,127,-20,-20,-38, 
  /* [7][0][][] */ 22,10,127,-16,-23,-37,3,-9,-79,24,-72,-52,9,-9,31,-13, 
  /* [8][0][][] */ 14,29,85,59,-45,93,10,44,32,-5,20,-94,-41,0,-127,-82, 
  /* [9][0][][] */ 42,-117,62,66,9,-25,-16,33,127,8,48,14,-8,5,-114,-39, 
  /* [10][0][][] */ -43,-104,3,8,-115,21,-35,65,96,127,66,-35,-12,79,68,4, 
  /* [11][0][][] */ 67,-22,62,-119,53,-36,-116,-127,-81,38,-27,-20,36,1,31,-104, 
  /* [12][0][][] */ -14,27,28,-22,-31,-31,-104,-7,-45,-81,-13,17,25,127,96,44, 
  /* [13][0][][] */ -27,-97,-56,34,-6,-69,8,-17,62,25,16,-47,19,20,127,52, 
  /* [14][0][][] */ -6,-38,60,33,32,45,2,127,14,43,8,-32,19,38,-65,108, 
  /* [15][0][][] */ 27,-44,1,67,16,-9,94,3,13,-127,10,-30,8,-17,-3,-29, 
  /* [16][0][][] */ 16,-82,-49,20,-4,-12,41,-78,127,76,67,6,1,78,62,77, 
  /* [17][0][][] */ -91,-62,80,98,127,65,26,-5,119,-46,3,-62,6,47,-120,61, 
  /* [18][0][][] */ -11,5,2,22,-127,9,12,39,-64,-12,-34,-70,-7,-125,71,-28, 
  /* [19][0][][] */ 37,-66,23,-78,79,31,-99,66,85,-65,74,27,-3,30,67,127, 
  /* [20][0][][] */ 43,-12,63,-62,-12,13,-29,53,-12,-48,91,-10,-3,15,-34,127, 
  /* [21][0][][] */ -50,-14,-2,-65,17,3,-63,-48,-27,57,4,11,-127,-13,37,-6, 
  /* [22][0][][] */ 33,-23,31,-26,21,-74,-5,-6,-127,15,-12,-42,-8,-10,79,-7, 
  /* [23][0][][] */ 17,9,18,-4,6,10,-7,4,-1,-2,35,-9,127,-3,-2,-41, 
  /* [24][0][][] */ -9,-19,0,-63,-29,-18,45,-2,-50,8,-8,-127,-4,-105,43,20, 
  /* [25][0][][] */ -125,-2,-56,-1,91,-19,-86,-127,8,66,-39,-65,-87,-64,25,-61, 
  /* [26][0][][] */ 34,-4,56,-89,127,-28,-4,12,96,-60,39,-16,3,80,-1,45, 
  /* [27][0][][] */ 99,-29,18,-32,-30,-54,-11,-24,-30,14,-127,15,22,-16,10,50, 
  /* [28][0][][] */ -126,-12,-127,-111,65,-6,72,-69,0,49,-62,31,30,-19,-44,49, 
  /* [29][0][][] */ -88,-50,-10,127,-17,5,1,-65,0,9,-83,48,31,-95,34,-41, 
  /* [30][0][][] */ 53,-8,127,-31,58,41,-41,72,-46,-93,67,-31,-11,20,-62,87, 
  /* [31][0][][] */ 9,-106,8,-54,8,-49,16,-40,-19,47,100,8,-39,93,60,127, 
  /* [32][0][][] */ -13,65,-38,33,-127,17,-67,-44,-50,-28,5,42,12,45,38,61, 
  /* [33][0][][] */ 31,-13,31,127,22,4,15,-41,-94,43,54,-16,1,6,1,93, 
  /* [34][0][][] */ 33,13,29,6,65,-27,-127,-6,-26,72,-43,1,-26,14,-3,11, 
  /* [35][0][][] */ 67,21,-10,-6,13,-127,-49,-15,-35,-23,-79,-3,59,14,0,32, 
  /* [36][0][][] */ 8,3,-127,-4,39,13,-40,18,-29,-21,-6,-4,-13,12,-5,6, 
  /* [37][0][][] */ 3,-3,127,-12,-57,19,33,-62,-18,28,-52,14,30,-12,15,-1, 
  /* [38][0][][] */ -122,47,5,38,41,95,4,-14,20,-31,127,-22,-31,22,-22,-31, 
  /* [39][0][][] */ -12,-17,13,36,29,-17,-127,36,24,32,1,-38,6,-20,1,-1, 
  /* [40][0][][] */ -25,71,-10,127,18,51,83,50,-73,-26,-24,61,11,64,-72,-36, 
  /* [41][0][][] */ 18,-6,-51,-30,-58,-11,127,84,-44,92,-37,-16,7,56,47,-1, 
  /* [42][0][][] */ 48,-12,10,-4,76,21,-53,77,104,-116,127,58,-36,35,-125,2, 
  /* [43][0][][] */ -69,2,34,-32,36,24,-68,-74,-18,44,-5,-10,-127,-6,30,-9, 
  /* [44][0][][] */ 6,1,-18,-10,-9,-22,-3,-48,127,7,15,37,21,68,6,47, 
  /* [45][0][][] */ -59,-89,8,-94,35,-18,-14,51,22,-74,-15,-29,35,114,-35,127, 
  /* [46][0][][] */ -49,15,-32,85,-85,-27,7,-78,-127,46,-40,-19,-5,26,6,-33, 
  /* [47][0][][] */ -34,-5,-116,127,-2,56,13,-30,10,70,73,60,-31,-23,34,-13, 
  /* [48][0][][] */ -12,-5,32,-127,23,-27,-17,2,-52,7,24,-29,-27,53,83,45, 
  /* [49][0][][] */ -36,24,42,102,-24,26,-47,-15,13,-48,-86,-30,-6,-40,-75,-127, 
  /* [50][0][][] */ 2,67,25,-127,67,15,-30,55,120,-41,-22,4,5,-51,20,-20, 
  /* [51][0][][] */ 6,-19,2,-13,25,-22,-45,-127,24,-56,9,-2,-3,-20,11,6, 
  /* [52][0][][] */ 12,7,-19,33,25,-3,-54,85,-61,127,-42,-45,62,101,11,-28, 
  /* [53][0][][] */ 5,93,11,-51,-20,7,9,-7,-70,-57,-35,40,19,-127,-101,21, 
  /* [54][0][][] */ -9,3,22,36,49,-32,8,-44,2,29,-15,-19,-2,127,-42,-17, 
  /* [55][0][][] */ -124,127,96,-26,43,-1,-26,-10,-57,23,102,-16,-15,-35,121,-7, 
  /* [56][0][][] */ 61,7,27,-106,92,6,-8,40,62,-41,40,127,-29,20,85,47, 
  /* [57][0][][] */ -28,-9,11,61,-35,20,56,127,-5,20,14,-38,-9,48,13,33, 
  /* [58][0][][] */ 31,127,-8,-116,9,30,-12,35,87,-12,-8,84,1,-82,38,63, 
  /* [59][0][][] */ 46,79,63,-94,-23,-6,22,31,2,14,39,-65,-8,-127,-101,27, 
  /* [60][0][][] */ 43,-8,104,-43,-40,127,42,-27,-11,43,-41,-12,40,11,27,-5, 
  /* [61][0][][] */ -28,28,-41,-57,-66,3,117,127,-32,71,-3,3,18,72,13,-29, 
  /* [62][0][][] */ 13,0,-23,-31,-75,0,-40,15,-18,-35,-14,-33,32,-127,101,12, 
  /* [63][0][][] */ 32,-37,-8,-89,42,4,-116,-127,-55,102,-30,0,57,3,24,-51, 
  /* [64][0][][] */ -28,-14,34,49,72,3,-29,-127,31,-100,-7,-45,-12,-19,-8,-7, 
  /* [65][0][][] */ -127,17,31,-59,14,80,52,-46,-72,38,48,-17,-4,20,-25,-35, 
  /* [66][0][][] */ 51,6,83,23,-47,20,-15,44,-38,0,60,-84,-15,58,-127,-16, 
  /* [67][0][][] */ 11,-9,-30,51,38,-40,-105,-108,24,-127,-74,-25,-95,14,-71,31, 
  /* [68][0][][] */ 5,-43,-74,54,-55,-85,10,-69,-34,11,47,-77,-33,55,127,-5, 
  /* [69][0][][] */ -29,35,-58,62,-11,-122,18,77,40,10,69,-4,127,44,-2,18, 
  /* [70][0][][] */ 9,18,-44,-44,-52,9,127,91,-30,51,-19,19,4,35,20,5, 
  /* [71][0][][] */ 9,-15,-29,-57,19,0,14,46,-32,-37,-8,6,15,-127,78,8, 
  /* [72][0][][] */ 38,36,-6,41,32,-37,-40,-127,26,70,-64,24,39,69,38,43, 
  /* [73][0][][] */ -31,-127,-34,-60,-77,-19,42,-20,-16,14,-37,-37,23,-44,66,-13, 
  /* [74][0][][] */ -29,17,59,113,-9,-4,-127,92,36,-31,-31,-39,5,-6,-10,-7, 
  /* [75][0][][] */ -56,36,-30,22,-25,94,96,125,-10,69,-5,-15,-127,75,11,20, 
  /* [76][0][][] */ -1,-18,-40,-50,41,-90,-127,-126,-42,-30,4,-15,57,-15,80,-58, 
  /* [77][0][][] */ -29,10,-26,-18,-40,-2,-9,-39,127,12,-65,11,-9,45,18,-82, 
  /* [78][0][][] */ -92,-127,-18,83,63,76,-30,29,-4,-69,-83,80,41,-30,102,72, 
  /* [79][0][][] */ 33,5,40,-47,127,11,44,22,86,13,0,31,-1,-19,3,-41, 
  /* [80][0][][] */ -13,-46,57,-116,-28,-10,-9,6,-98,-29,4,-74,0,127,-28,34, 
  /* [81][0][][] */ 23,-30,44,46,7,54,-21,-33,6,0,7,-69,-13,32,-127,18, 
  /* [82][0][][] */ -73,-24,44,-102,6,-30,-7,-26,-24,-35,-57,-127,-24,-81,-101,18, 
  /* [83][0][][] */ 20,3,-62,-97,-44,-11,2,45,-66,-6,13,-76,33,-127,38,66, 
  /* [84][0][][] */ 127,46,19,50,-50,7,-64,28,-5,-30,95,14,-73,22,81,-74, 
  /* [85][0][][] */ 11,-15,28,-12,50,-6,-22,127,-77,-100,-70,-35,-5,77,69,-112, 
  /* [86][0][][] */ 21,-18,-8,-3,-57,50,-52,31,-70,-50,42,-24,-19,-127,-10,33, 
  /* [87][0][][] */ 127,-33,28,5,-44,-47,2,2,3,13,-124,17,41,-15,-13,24, 
  /* [88][0][][] */ 27,63,-19,5,-13,-42,-22,-23,98,26,41,35,-9,-26,95,-127, 
  /* [89][0][][] */ 39,67,-83,-11,-44,-18,32,-60,58,61,35,-35,-33,8,-22,-127, 
  /* [90][0][][] */ 8,-41,19,-68,-66,50,127,-82,125,-107,53,-106,62,-4,-46,1, 
  /* [91][0][][] */ 24,6,-12,-62,-30,2,18,-32,-21,22,61,54,10,-22,19,127, 
  /* [92][0][][] */ 38,3,18,23,60,-5,-74,-127,40,-62,10,-34,-40,-17,-1,-36, 
  /* [93][0][][] */ 64,11,39,-127,-43,-10,-28,42,36,-73,78,-27,-38,105,-17,25, 
  /* [94][0][][] */ -95,41,-109,7,50,-127,-35,-7,-17,-65,74,-34,-10,-15,-1,0, 
  /* [95][0][][] */ 0,93,41,-127,5,22,-32,16,21,-59,-50,-72,-3,43,-75,5, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00077917193993926048, 0.00084415753372013569, 0.00037943859933875501, 0.000257968989899382, 0.00044002779759466648, 0.00083339971024543047, 0.0014944885624572635, 0.00086702662520110607, 0.00019569534924812615, 0.001156708924099803, 0.00063791131833568215, 0.000527121068444103, 0.00051781849469989538, 0.00040294710197485983, 0.000173214401002042, 0.0012887751217931509, 0.00048777429037727416, 0.00040008386713452637, 0.00036903345608152449, 0.00071106106042861938, 0.00092920626047998667, 0.0013260316336527467, 0.00061689555877819657, 0.0018198891775682569, 0.0016852219123393297, 0.000529133016243577, 0.00054652953986078501, 0.00043567182729020715, 0.00071120605571195483, 0.00021203215874265879, 0.00011504651774885133, 0.00042853516060858965, 0.0010491205612197518, 0.0007001780322752893, 0.00083696364890784025, 0.00064297026256099343, 0.0010758854914456606, 0.0012569737154990435, 0.00026947757578454912, 0.0022798220161348581, 0.00027636249433271587, 0.00052928348304703832, 0.00014094248763285577, 0.00086089532123878598, 0.00031038894667290151, 0.0005840337835252285, 0.00093386933440342546, 0.00049945031059905887, 0.00026361594791524112, 0.00079007726162672043, 0.00064843083964660764, 0.00056960940128192306, 0.00088214827701449394, 0.00074184517143294215, 0.0011839094804599881, 0.00040895113488659263, 0.00058599741896614432, 0.00031762098660692573, 0.0011157954577356577, 0.00053624639986082911, 0.00093691609799861908, 0.00027858879184350371, 0.00050558173097670078, 0.00047733142855577171, 0.00074340752325952053, 0.00052236957708373666, 0.00052768387831747532, 0.00074041768675670028, 0.00055368430912494659, 0.00073512899689376354, 0.00070706207770854235, 0.00046474728151224554, 0.00033911882201209664, 0.0003844582533929497, 0.0012215233873575926, 0.00069644569884985685, 0.00049468578072264791, 0.00073244626400992274, 0.0011303516803309321, 0.0012238472700119019, 0.00040683068800717592, 0.00032901263330131769, 0.00059111957671120763, 0.00037750389310531318, 0.0014192098751664162, 0.00080931023694574833, 0.00073738337960094213, 0.00012841295392718166, 0.00038192889769561589, 0.00063889013836160302, 0.00065750221256166697, 0.0018359787063673139, 0.00073102978058159351, 0.00064733653562143445, 0.0006218401831574738, 0.00038501707604154944, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 1480, 4767, 13739, 24795, 18883, -3388, -1464, 5336, 33546, -3340, 11713, 4669, 6810, 16070, 38191, 1230, 2722, 8660, 16925, 4613, -267, 457, 9008, -977, 4352, 104, 11404, 8971, 6403, 46496, 69068, 16172, 4366, -815, 6769, 2472, 1344, 3234, 27912, -698, 19112, 8263, 52907, -3458, 29322, 7331, 5177, 15092, 43447, 7382, -632, 8365, -3407, -319, -2429, 7894, -508, 16582, 5052, 7658, 4749, 13801, 8206, 5686, 9315, 10324, 6897, -4983, 8475, -2698, 4286, 9448, 17041, 7380, -3513, -5454, 9253, 396, 1922, -972, 14073, 13989, 4302, 14433, 2274, 278, 8778, 83400, 10339, 9795, 5474, -163, 5587, 6846, 4950, 12412, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00027974785189144313, 0.00030307978158816695, 0.00013623069389723241, 9.2619186034426093e-05, 0.00015798416279722005, 0.00029921735404059291, 0.00053656956879422069, 0.00031129052513279021, 7.0260939537547529e-05, 0.00041529579902999103, 0.00022903073113411665, 0.00018925346375908703, 0.00018591353727970272, 0.00014467100845649838, 6.2189552409108728e-05, 0.00046271181781776249, 0.00017512669728603214, 0.00014364300295710564, 0.00013249491166789085, 0.0002552938531152904, 0.00033361499663442373, 0.00047608811291866004, 0.00022148540301714092, 0.00065339892171323299, 0.00060504901921376586, 0.00018997582083102316, 0.00019622172112576663, 0.00015642023936379701, 0.0002553459198679775, 7.6126380008645356e-05, 4.1305407648906112e-05, 0.00015385793813038617, 0.00037666811840608716, 0.00025138648925349116, 0.00030049693305045366, 0.00023084705753717571, 0.00038627759204246104, 0.00045129409409128129, 9.6751136879902333e-05, 0.0008185296319425106, 9.9223048891872168e-05, 0.00019002983754035085, 5.0602899136720225e-05, 0.00030908916960470378, 0.00011143963638460264, 0.00020968695753253996, 0.00033528919448144734, 0.00017931876936927438, 9.4646624347660691e-05, 0.00028366321930661798, 0.00023280757886823267, 0.0002045081346295774, 0.00031671967008151114, 0.00026634632376953959, 0.0004250616766512394, 0.00014682664186693728, 0.00021039196872152388, 0.00011403617827454582, 0.00040060654282569885, 0.00019252975471317768, 0.00033638309105299413, 0.0001000223564915359, 0.00018152013944927603, 0.00017137736722361296, 0.00026690727099776268, 0.00018754752818495035, 0.00018945553165394813, 0.00026583383441902697, 0.00019879051251336932, 0.00026393501320853829, 0.00025385807384736836, 0.00016685925947967917, 0.00012175459414720535, 0.00013803290494251996, 0.00043856629054062068, 0.00025004646158777177, 0.00017760814807843417, 0.00026297182193957269, 0.00040583268855698407, 0.00043940063915215433, 0.00014606532931793481, 0.00011812614684458822, 0.00021223098156042397, 0.00013553607277572155, 0.00050954212201759219, 0.00029056848143227398, 0.00026474441983737051, 4.6104389184620231e-05, 0.00013712479267269373, 0.00022938215988688171, 0.00023606450122315437, 0.00065917556639760733, 0.00026246326160617173, 0.00023241469170898199, 0.00022326067846734077, 0.00013823354674968868, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-10,127,23,70,76,-60,-14,-17,-15,-6,-29,1,37,-1,-8,-44,26,23,17,-127,127,5,-82,6,52,-28,-126,-127,39,24,14,27,58,-18,-30,-11,31,-5,-14,26,-111,69,24,-67,39,45,-17,54,-23,20,4,-7,15,47,-90,-49,-58,-19,-12,0,11,37,67,-25,73,10,-10,16,19,127,23,23,27,0,-11,16,127,-7,-15,15,-27,20,127,22,-75,-16,-2,-32,-17,-40,1,-25,-15,26, 127,-127,75,106,-42,127,40,-119,71,4,-16,127,127,-99,-13,16,10,127,127,-111,127,-81,80,67,-127,-118,-63,-34,-55,46,-59,-20,-90,53,-127,-84,-43,-14,-53,65,-1,127,127,82,-52,-111,-112,-51,-15,-127,43,84,67,-31,45,82,-47,41,-80,-112,-44,-40,-62,67,73,-62,25,28,-83,32,-18,91,117,127,15,20,2,57,-33,51,65,127,127,-23,-9,76,-112,127,-120,-103,4,-127,-91,-127,-37,106, -74,-12,29,-83,15,-24,66,-9,81,-36,-26,17,-19,-7,-8,-14,-9,-16,6,-3,-23,-102,29,0,-122,96,7,-55,119,50,-14,8,2,14,13,-29,-9,33,20,12,24,12,-121,64,17,-18,37,14,-14,11,-15,5,-10,2,-1,20,-66,5,-35,52,3,41,32,-1,-7,-39,-32,20,10,2,-4,37,10,-25,-5,5,-12,-7,-83,2,-21,-25,-18,3,-111,8,-32,-22,-52,23,-27,-29,28,-26,-14,0, 
  /* [0][1][][] */ -64,-74,74,-37,-48,93,19,127,-51,-22,-1,-118,26,-113,78,29,0,-59,-17,89,52,-71,46,50,-93,-11,127,-22,-24,64,123,-106,-127,91,-87,-55,-35,32,-29,103,-50,-26,-6,47,-49,127,-22,65,17,96,21,-1,15,-54,27,31,127,121,-71,-84,127,-32,-35,127,71,-38,-15,0,127,39,127,97,-40,102,-5,14,14,13,-31,8,-44,124,-81,111,2,35,-56,30,76,-127,-34,-6,127,-70,-21,1, 66,126,57,-116,127,83,89,39,-127,127,127,-38,-64,-127,-127,127,127,-63,-123,-50,102,99,-124,127,-106,-91,-42,127,-127,109,-127,-127,-91,127,106,127,127,-127,-106,127,-66,-97,113,-127,-127,-35,-127,-127,127,-112,87,44,127,127,127,-127,99,-127,-127,127,20,-79,-127,-98,-127,127,-127,127,-127,-127,-107,-84,-127,-78,127,127,-127,127,-78,127,127,30,-43,-127,61,127,93,46,127,13,127,2,-68,37,127,-127, -53,-13,-52,38,-56,-96,36,-28,19,-37,-28,93,2,89,14,9,-3,65,-7,127,1,-89,-42,5,-69,106,-68,-20,-70,-17,17,-65,-70,38,5,-17,-29,45,-68,45,127,-4,-39,30,-40,-58,16,46,10,119,-11,6,-37,-71,4,18,95,1,0,22,-33,127,90,-51,-43,12,37,-13,-78,121,-19,-86,-1,-53,-16,-19,27,16,77,-36,-70,-43,56,15,-48,-19,74,23,13,62,-45,21,-44,98,-26,-6, 
  /* [0][2][][] */ -65,1,-3,-21,13,-44,66,24,55,-28,-36,-3,19,19,-27,1,-6,65,6,1,-55,-84,1,-8,-26,-54,36,-69,91,39,26,24,18,-9,-13,-45,-8,37,-4,2,-17,-7,-70,107,3,30,12,37,-15,-30,12,-20,20,-1,10,14,-70,24,-13,14,15,1,-21,-3,-1,-48,-46,16,-33,12,26,30,14,-19,28,3,17,4,-77,-14,-10,-6,16,15,-127,8,14,-44,-61,-50,-29,-49,9,58,-18,-7, 121,33,-127,-35,-71,-24,38,29,-65,-31,-18,-106,-75,111,-13,37,1,-50,-9,-126,92,-54,-40,-1,-103,127,-50,20,-36,-21,-8,-5,-64,17,27,5,-23,-28,127,58,10,-14,69,-33,-39,76,-68,-43,-33,-5,-127,-127,-52,-25,3,37,-66,-7,10,39,-7,-17,8,-46,-54,32,63,-20,116,107,-24,-71,12,-57,4,3,100,3,50,23,13,-97,-51,4,3,9,127,39,-62,38,-20,-106,41,80,-10,25, -53,12,-18,27,16,-67,-127,1,-12,-9,-16,5,15,-26,19,-2,-6,-16,5,17,-49,-74,13,0,18,-96,21,3,-48,-39,-6,14,44,-20,-6,-25,-36,3,41,-36,22,-2,-49,-33,3,67,23,17,-8,-4,11,-9,15,7,-3,-7,-62,-13,0,-37,-11,11,82,-11,34,-3,-2,26,2,4,-4,20,-17,16,-1,15,35,0,73,-11,4,-9,-8,-16,73,-1,42,-39,57,39,-18,-49,-8,2,-15,-16, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0031870119273662567, 0.0042715547606348991, 0.0047836704179644585, 0.0094962539151310921, 0.010053504258394241, 0.01091524213552475, 0.0027566985227167606, 0.0048269247636198997, 0.010140463709831238, 0.007973765954375267, 0.010301245376467705, 0.0044841794297099113, 0.011353593319654465, 0.0084499288350343704, 0.016464598476886749, 0.0078756492584943771, 0.0077921710908412933, 0.0089393854141235352, 0.0083143608644604683, 0.0025260832626372576, 0.0042654327116906643, 0.0024410160258412361, 0.0059893000870943069, 0.0048789670690894127, 0.0051378542557358742, 0.0027846174780279398, 0.0072829937562346458, 0.0081033604219555855, 0.0031102348584681749, 0.02120780386030674, 0.015831021592020988, 0.012149146758019924, 0.0057084527797996998, 0.0064921807497739792, 0.012017889879643917, 0.020090848207473755, 0.015403305180370808, 0.0077336565591394901, 0.014732834883034229, 0.0035386721137911081, 0.0097409216687083244, 0.013287371955811977, 0.013287895359098911, 0.0026109537575393915, 0.016639726236462593, 0.0045768767595291138, 0.004924471490085125, 0.011827116832137108, 0.02812635712325573, 0.0055805249139666557, 0.019257118925452232, 0.006830624770373106, 0.010470948182046413, 0.0077415900304913521, 0.015313461422920227, 0.0048891426995396614, 0.0077700852416455746, 0.016261307522654533, 0.0026396801695227623, 0.0085626030340790749, 0.012574117630720139, 0.014920866116881371, 0.0043561458587646484, 0.0054662842303514481, 0.0059120170772075653, 0.0054042534902691841, 0.016512073576450348, 0.011567855253815651, 0.0082323979586362839, 0.0059442655183374882, 0.010515186004340649, 0.0042798947542905807, 0.013315212912857533, 0.0056168944574892521, 0.022310834378004074, 0.02205553837120533, 0.0053436225280165672, 0.0031814554240554571, 0.0022909149993211031, 0.0062716170214116573, 0.009656885638833046, 0.010501164942979813, 0.0057592377997934818, 0.01085010077804327, 0.0021915440447628498, 0.0045307553373277187, 0.0035786768421530724, 0.019046064466238022, 0.011299464851617813, 0.0049515645951032639, 0.013987804763019085, 0.0013173306360840797, 0.0068341149017214775, 0.0052393716759979725, 0.012230063788592815, 0.011955596506595612, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 30376, 55219, -1521, 478, 14010, -2928, 84, -1259, 5211, 13415, -5679, -457, 344, 4493, 4872, -8650, -4325, -773, 531, 19223, -9357, 12115, -1492, 6332, 30267, -484, -5597, 16083, 13286, -19501, 1055, 23025, 23406, -10610, 2763, 324, -540, -1340, 5368, -8513, -4782, 607, -9325, 146, 30893, -1088, 12745, -1529, -15620, 239, -128, -153, -2021, 15408, -2324, 15762, 15014, 183, 31913, -607, -9907, -713, 1844, -134, -2428, 14804, -165, -7761, -3202, 3387, 634, -3126, 1033, 716, -1265, -3473, 127, -1257, 47712, -7798, -5939, -11625, 26, -180, 68515, -13852, -11122, -27951, -6393, 9132, -2476, 30334, 607, -1799, -3928, 855, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 7.4988514825236052e-05, 0.00010050717537524179, 0.00011255695426370949, 0.0002234412677353248, 0.00023655305267311633, 0.00025682922569103539, 6.4863495936151594e-05, 0.00011357470066286623, 0.0002385991538176313, 0.00018761803221423179, 0.00024238224432338029, 0.00010551010927883908, 0.00026714339037425816, 0.00019882185733877122, 0.00038740233867429197, 0.00018530939996708184, 0.00018334521155338734, 0.00021033849043305963, 0.0001956320193130523, 5.9437254094518721e-05, 0.00010036312596639618, 5.7435670896666124e-05, 0.00014092470519244671, 0.00011479922977741808, 0.0001208906905958429, 6.5520413045305759e-05, 0.000171364561538212, 0.00019066731329075992, 7.3181996413040906e-05, 0.00049900717567652464, 0.00037249462911859155, 0.00028586227563209832, 0.00013431653496809304, 0.00015275720215868205, 0.00028277389355935156, 0.00047272586380131543, 0.00036243072827346623, 0.00018196839664597064, 0.00034665493876673281, 8.3262872067280114e-05, 0.00022919816547073424, 0.00031264405697584152, 0.00031265636789612472, 6.143420614534989e-05, 0.00039152297540567815, 0.00010769122309284285, 0.00011586991604417562, 0.0002782850933726877, 0.00066179665736854076, 0.00013130647130310535, 0.00045310868881642818, 0.00016072059224825352, 0.00024637524620629847, 0.00018215506861452013, 0.00036031674244441092, 0.0001150386524386704, 0.00018282553355675191, 0.00038261900772340596, 6.2110120779834688e-05, 0.00020147301256656647, 0.00029586159507744014, 0.0003510792157612741, 0.00010249754996038973, 0.00012861845607403666, 0.00013910628331359476, 0.00012715891352854669, 0.00038851937279105186, 0.00027218484319746494, 0.00019370348309166729, 0.00013986507838126272, 0.00024741614470258355, 0.00010070340795209631, 0.00031329912599176168, 0.00013216222578193992, 0.00052496080752462149, 0.00051895383512601256, 0.00012573230196721852, 7.485777314286679e-05, 5.3903884690953419e-05, 0.00014756746531929821, 0.00022722083667758852, 0.00024708625278435647, 0.00013551148003898561, 0.00025529650156386197, 5.1565744797699153e-05, 0.00010660600673872977, 8.4204162703827024e-05, 0.00044814270222559571, 0.00026586977764964104, 0.00011650740634649992, 0.0003291248285677284, 3.0996015993878245e-05, 0.0001608027087058872, 0.0001232793292729184, 0.00028776621911674738, 0.00028130816644988954, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -20,-11,4,-34,19,-8,-42,-3,14,7,-9,2,-6,-7,-29,9,-3,4,-1,-4,8,-28,7,2,8,10,2,127,36,-34,38,-8,-10,5,3,-1,-13,11,-42,-1,-14,4,-1,37,4,10,11,3,22,2,-13,11,22,-22,-10,85,2,6,-26,-38,-10,23,1,-25,-40,-72,-18,39,7,8,15,-14,-9,-36,-3,-21,-25,16,0,5,-12,-28,23,24,0,-8,-12,-94,5,-12,3,-1,45,-35,-39,-9, 
  /* [1][0][][] */ 33,-71,-80,-64,127,-20,58,34,-26,-100,-59,-20,0,-9,-67,43,-74,2,57,40,17,50,-14,-59,19,-12,-18,-77,42,-27,-67,45,-30,29,0,-3,3,-13,-11,30,-36,32,-41,-16,-44,94,15,2,30,-76,16,-40,-15,37,49,19,-63,-28,-32,-41,19,-24,0,-48,-82,102,-24,-24,-9,-34,-26,19,51,-114,-26,-4,33,-58,41,2,0,-27,26,-5,-49,38,-23,22,19,-34,-5,14,21,6,30,97, 
  /* [2][0][][] */ -7,58,-68,-17,76,82,26,65,-11,-96,-16,-19,9,-7,24,38,6,-12,-33,66,8,14,78,17,32,21,-8,-44,41,-12,41,-55,16,41,-33,31,-127,-81,22,42,-9,-53,11,-9,14,-28,-11,57,-14,5,-29,-2,71,-11,-7,61,24,8,39,2,12,8,30,-17,21,-6,-21,-7,-54,-13,-24,-23,-42,-70,6,61,56,49,28,-13,5,-56,14,-2,-34,21,7,37,-22,25,5,-8,-6,-38,-61,0, 
  /* [3][0][][] */ 67,10,88,-7,50,-36,16,-6,-17,-41,2,-34,0,40,40,101,26,-6,26,10,127,-20,39,22,53,-12,-13,17,29,39,-8,83,-104,30,40,-3,-13,-15,0,32,-77,-26,80,9,27,47,-45,-86,-67,-34,-70,42,-8,-125,12,20,-103,73,59,39,20,102,-12,-50,28,73,-13,-64,20,-24,4,-65,50,-30,62,-11,13,2,55,52,-38,-82,23,1,-34,5,29,36,27,8,20,36,39,106,48,-38, 
  /* [4][0][][] */ 29,-20,21,0,127,36,-7,-15,-29,-48,-43,-30,-48,16,-2,49,30,-75,-42,91,-21,-5,24,-14,-8,-3,18,-39,10,-2,60,-41,84,9,-14,21,44,21,20,7,-26,9,-39,-23,-6,-46,-21,13,39,7,-16,15,-4,-28,3,-23,33,-8,-34,33,-7,82,61,31,39,30,-17,-3,-40,11,53,61,17,-56,-37,-28,26,41,86,-40,-13,-38,2,7,-77,6,43,46,-53,25,4,-47,11,20,31,-18, 
  /* [5][0][][] */ 1,-13,-5,8,14,-15,41,-23,-29,-46,-31,5,12,29,0,25,-19,-7,28,1,21,26,-35,74,5,-7,13,-118,2,34,15,32,-16,6,-2,-61,16,18,-1,25,-20,-18,23,-15,-11,4,-7,-26,-4,-27,6,-8,-13,-33,-8,-49,-10,16,-13,17,62,7,-2,46,-8,58,17,78,1,95,8,41,10,19,1,72,-44,-5,17,8,-28,-36,5,25,-9,14,-20,127,-7,26,0,-2,0,15,-62,15, 
  /* [6][0][][] */ 20,-80,20,-43,-37,11,32,23,0,1,-28,-78,-40,1,-35,36,9,-13,8,-9,-53,53,19,4,-24,-11,-22,-16,-14,12,37,1,66,11,60,-5,-11,-18,15,-89,-28,89,-1,-32,12,-24,-29,14,-1,35,-32,78,-38,-67,-12,-6,-2,-68,-3,-2,-20,53,40,-78,36,-32,3,-19,-25,-7,127,11,-46,6,-32,17,-100,-13,14,6,23,21,19,-2,-20,0,37,19,12,13,49,-31,-19,-9,-36,-28, 
  /* [7][0][][] */ -1,127,52,6,115,48,39,-35,-32,-22,21,-20,-16,25,16,32,6,-41,13,26,28,-20,42,8,-6,9,8,4,28,-12,3,28,37,0,-49,6,16,5,-10,93,-54,20,17,27,-15,-25,22,-25,-6,-37,27,19,13,-44,-29,52,40,-1,-14,-5,-21,-49,-4,2,-48,67,-25,-80,-21,-45,-11,71,-19,-28,13,7,40,54,36,-14,-54,-50,-13,1,-11,51,-13,-1,-29,34,-38,-29,-51,-21,20,0, 
  /* [8][0][][] */ 2,-7,45,25,-127,-33,47,-13,33,68,53,13,-16,1,29,3,-34,12,17,3,-38,-6,-109,68,16,-27,59,-12,10,5,6,41,62,-15,1,-1,-19,-9,9,48,17,-25,39,19,-41,4,41,6,-106,14,30,22,-58,-30,-28,48,19,-42,-83,-14,15,-25,-28,0,7,63,-4,-52,24,-12,-40,-19,46,57,56,-18,-21,-28,-10,25,-79,0,-10,1,18,20,60,35,17,-39,52,39,6,0,44,10, 
  /* [9][0][][] */ 15,-112,-25,29,102,88,-33,-29,36,-48,104,93,-30,11,102,-109,20,-33,-11,21,-57,-64,29,-8,-24,4,0,34,-40,-4,9,-8,23,19,-113,36,0,19,-21,68,41,-76,-28,70,6,-14,-85,-31,16,36,-13,-104,70,35,-17,-56,1,98,-25,7,25,-54,-37,127,-97,-8,-17,-22,2,36,-61,-94,55,-14,2,32,69,-83,31,-1,1,-23,2,30,-8,-73,31,-12,-6,-39,-59,22,-63,-5,-6,-54, 
  /* [10][0][][] */ -47,-16,-27,-46,-21,-2,59,-25,29,23,30,31,25,-7,-10,0,-10,20,-23,-22,-6,30,19,15,-6,-5,7,-127,27,-38,49,-29,4,13,-8,-13,-7,27,-3,-8,6,-36,25,-49,7,-9,24,10,-6,32,-29,-16,-30,-26,-3,-51,15,9,-2,-42,21,6,1,6,-31,82,-13,-34,17,-31,-5,-14,-31,-12,22,59,-3,33,-23,19,-24,3,5,27,11,-13,-11,116,5,1,10,16,18,-40,38,-31, 
  /* [11][0][][] */ -92,18,2,6,6,-68,-11,6,-44,-16,-11,21,33,14,-20,-8,54,11,-60,-52,24,-3,-7,6,75,11,68,5,-16,34,-33,25,-15,20,-10,-3,-5,8,27,19,-19,-10,8,15,82,28,79,18,65,47,-3,38,-2,-61,20,-5,-70,-8,-40,-38,-7,-18,-7,28,-3,-26,40,1,25,-1,-8,39,-20,20,32,-4,-29,91,-127,77,-37,-15,-65,-60,127,21,39,-13,2,42,-21,-61,-19,46,-19,-5, 
  /* [12][0][][] */ -3,-18,-53,8,73,16,4,-14,-9,26,24,-6,-3,-11,38,-15,-35,-16,7,-13,-14,-47,-43,54,-22,51,-20,104,-20,30,-40,-9,-5,37,17,32,-17,-17,22,1,4,-9,-15,3,-17,-1,15,30,-20,-13,4,-33,-7,15,2,-17,-4,-9,16,26,-7,-15,2,50,38,-96,7,56,-27,-127,3,53,4,14,25,84,8,-21,-1,-10,-14,32,-44,7,8,-13,6,-58,-8,4,-1,-6,-43,46,-11,23, 
  /* [13][0][][] */ -73,59,-8,-2,-63,6,-12,14,-34,-31,34,29,81,25,-20,-7,-9,24,-44,-6,23,-16,49,-50,79,40,-1,4,8,-52,-31,-100,-86,-34,7,12,1,31,40,-23,-31,83,12,19,44,8,-5,10,59,-3,38,67,73,-59,85,-13,-17,54,35,7,16,34,-7,13,3,-19,-8,-4,17,23,24,-127,18,-26,-79,10,50,43,-42,-37,94,-15,8,-34,35,-34,90,2,-30,3,-17,18,37,-36,-12,0, 
  /* [14][0][][] */ -30,15,-26,-51,36,1,-9,37,-90,-1,31,18,-43,-74,-81,-37,-94,-16,69,12,48,-22,12,-113,-45,15,-52,-16,7,-30,-3,-47,-69,-35,34,18,-11,4,13,-18,19,100,-85,-22,-53,26,9,19,127,-22,31,-24,40,66,-122,16,-21,36,-123,17,18,41,41,25,1,37,-11,6,-55,34,75,32,40,-4,-36,29,59,-88,-31,-118,32,-32,9,40,34,-80,-39,9,-41,22,37,45,22,47,25,-17, 
  /* [15][0][][] */ -37,-75,-14,-40,16,7,-8,-57,-27,24,-7,-32,31,-9,37,-11,-91,-8,-15,9,-17,-7,-59,-46,-2,-2,-9,11,-14,-27,50,-83,-1,33,17,-1,-10,20,-99,3,24,-69,-2,27,-27,-54,49,26,40,14,-14,-127,9,39,3,40,30,-17,-15,33,6,0,44,-4,-1,-18,-19,-8,-12,20,6,37,-42,2,8,-37,-20,-18,1,6,-7,44,-11,67,-9,-32,-35,-34,-47,54,22,79,-37,-8,-5,-15, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.032852597534656525, 0.015293112024664879, 0.0096107861027121544, 0.0094029791653156281, 0.020124014467000961, 0.013145096600055695, 0.015777437016367912, 0.014341601170599461, 0.015373098663985729, 0.010768379084765911, 0.028823787346482277, 0.022761808708310127, 0.017540266737341881, 0.010802467353641987, 0.019152078777551651, 0.017866777256131172, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -8324, 21390, -15290, -5950, -10228, 14301, 32274, -51050, -1581, 17468, 24064, 15847, -10335, 11042, -6864, 12758, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.00077300233533605933, 0.00035983792622573674, 0.00022613615146838129, 0.00022124657698441297, 0.00047350622480735183, 0.00030929638887755573, 0.00037123382207937539, 0.00033744945540092885, 0.00036171998362988234, 0.00025337364058941603, 0.00067820679396390915, 0.00053557200590148568, 0.00041271216468885541, 0.00025417571305297315, 0.0004506371624302119, 0.00042039476102218032, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -24,99,2,-127,-51,-28,-32,-65,-15,13,10,85,20,-56,-13,54, 
  /* [1][0][][] */ -47,18,-72,-10,-37,-35,22,-94,59,50,-65,15,9,-1,51,-127, 
  /* [2][0][][] */ -9,-5,-28,28,31,-3,-66,-64,127,-8,-23,3,-15,52,-63,10, 
  /* [3][0][][] */ 45,-46,6,-91,31,-20,-3,0,76,-24,69,31,5,34,15,127, 
  /* [4][0][][] */ -77,55,13,38,10,-12,0,39,-2,3,25,-24,-127,-17,-18,22, 
  /* [5][0][][] */ 12,80,104,20,41,73,-67,79,-49,69,-11,-25,25,-34,-127,32, 
  /* [6][0][][] */ 43,-52,127,-120,46,6,-38,104,-69,-95,39,-28,-6,96,-28,75, 
  /* [7][0][][] */ 37,120,-34,-69,102,11,-1,-59,127,93,-33,17,30,-30,73,61, 
  /* [8][0][][] */ 8,-87,10,-90,24,-56,8,-73,24,65,67,-11,22,127,79,61, 
  /* [9][0][][] */ 13,-29,-1,127,44,-5,44,-55,-58,112,32,-18,-8,-59,-11,-8, 
  /* [10][0][][] */ -22,13,-68,-127,1,-1,-8,38,43,-40,16,-23,-14,-44,10,23, 
  /* [11][0][][] */ -1,11,18,-17,75,-24,79,-55,-82,45,3,32,-10,127,-59,-25, 
  /* [12][0][][] */ 59,-23,-127,-22,20,-87,30,14,11,51,-71,-53,-37,120,8,40, 
  /* [13][0][][] */ -14,9,-30,9,5,-127,-3,19,1,-14,8,-1,14,-16,13,14, 
  /* [14][0][][] */ 21,-34,84,-37,53,0,-127,-95,-26,-35,19,10,14,-63,-11,-25, 
  /* [15][0][][] */ -96,19,-12,-49,-5,-12,127,54,-12,60,58,-27,17,76,57,-2, 
  /* [16][0][][] */ 23,54,127,87,4,12,74,67,-70,3,-58,-5,6,12,-5,-62, 
  /* [17][0][][] */ -41,-105,-17,26,-65,-23,-54,12,-127,-29,16,-46,-3,36,63,-34, 
  /* [18][0][][] */ -1,32,-4,55,28,4,15,-4,64,47,-27,-29,10,127,55,26, 
  /* [19][0][][] */ 5,-29,33,5,97,11,-90,-73,-103,-71,-35,-127,-31,-50,6,-32, 
  /* [20][0][][] */ 108,-51,-83,-51,6,-127,1,19,-79,30,-120,-27,27,-1,41,10, 
  /* [21][0][][] */ 75,-37,70,-29,-22,2,-17,111,-21,-104,82,26,8,127,58,96, 
  /* [22][0][][] */ -19,37,-31,127,-50,5,78,67,6,30,-8,43,-14,13,20,-5, 
  /* [23][0][][] */ 34,-19,115,-91,57,-16,-4,32,37,44,-18,-19,3,-34,-127,-6, 
  /* [24][0][][] */ -127,38,13,-15,0,101,23,-19,2,31,87,-6,-83,18,53,-29, 
  /* [25][0][][] */ 27,26,15,24,14,10,62,-46,-1,-127,-14,-15,-11,-26,9,17, 
  /* [26][0][][] */ -40,-5,-5,3,-51,-12,-37,-37,-119,-42,8,-39,15,127,-34,59, 
  /* [27][0][][] */ -7,32,8,80,44,-39,-22,-42,64,5,-35,-3,5,127,-16,11, 
  /* [28][0][][] */ 20,73,55,72,127,-2,32,38,-115,-28,-41,-36,19,91,52,-38, 
  /* [29][0][][] */ -4,-6,4,12,25,-4,6,32,-23,-13,-15,-127,2,-18,-14,8, 
  /* [30][0][][] */ -21,78,-50,69,-34,-19,40,-127,-48,51,-12,-6,53,34,80,87, 
  /* [31][0][][] */ -29,-29,-2,-62,-17,5,-37,-102,27,86,-12,-127,-38,-40,-6,18, 
  /* [32][0][][] */ -127,-74,-14,55,60,27,-14,2,-8,-57,-102,42,74,-2,67,73, 
  /* [33][0][][] */ -19,-27,-47,-11,-86,-12,-76,-4,62,12,13,-53,26,-127,124,23, 
  /* [34][0][][] */ 52,-4,67,28,46,17,-47,84,-83,-54,63,24,12,-6,-20,127, 
  /* [35][0][][] */ -32,57,-64,22,-8,-14,34,-110,88,94,-77,7,-2,-2,72,-127, 
  /* [36][0][][] */ -7,39,22,127,38,12,91,19,-7,20,-24,-9,-7,20,-71,-33, 
  /* [37][0][][] */ -2,-5,15,-56,-8,0,-41,-62,-72,-13,-7,-6,-2,-127,49,-40, 
  /* [38][0][][] */ 38,93,-20,-61,127,-13,23,-51,127,78,-23,-8,22,-36,64,20, 
  /* [39][0][][] */ -29,65,-6,-127,-15,8,-55,36,52,-71,-36,-16,8,77,43,27, 
  /* [40][0][][] */ -9,-27,26,-83,-15,-12,-20,-56,-127,-1,-26,-28,-11,-112,91,-71, 
  /* [41][0][][] */ -1,-6,-36,-16,15,-14,18,-1,-42,-1,-46,2,-127,10,23,32, 
  /* [42][0][][] */ 127,92,-32,-24,-69,-32,-1,-48,-11,8,94,-51,-63,46,96,-110, 
  /* [43][0][][] */ -11,125,-76,5,71,-20,119,-34,72,114,-74,3,38,-127,-89,-70, 
  /* [44][0][][] */ -18,-13,3,-49,58,1,-92,-127,-39,-14,26,3,2,-36,82,-57, 
  /* [45][0][][] */ -3,60,-127,-48,43,-49,20,-71,-4,21,0,-82,18,-27,67,-17, 
  /* [46][0][][] */ -3,0,-15,-82,-19,13,16,-29,-112,-20,2,14,-14,-127,62,-33, 
  /* [47][0][][] */ 24,50,26,-15,127,-13,-27,18,-52,43,2,23,9,4,113,-22, 
  /* [48][0][][] */ -127,-78,-27,30,61,13,8,-23,-7,-21,-99,37,64,5,81,55, 
  /* [49][0][][] */ 13,15,109,72,127,4,61,31,-120,-53,-37,-73,5,114,10,-48, 
  /* [50][0][][] */ 32,-25,-83,-8,29,-127,-43,-10,-15,-18,-9,-36,40,-12,-10,6, 
  /* [51][0][][] */ 11,41,45,16,31,8,0,27,-127,58,1,-109,8,-107,-28,83, 
  /* [52][0][][] */ 12,57,6,63,53,-16,19,33,74,85,-40,-61,55,127,62,14, 
  /* [53][0][][] */ -9,-54,-26,-19,-96,-13,-80,-12,50,31,13,-68,26,-127,123,11, 
  /* [54][0][][] */ 51,-18,-53,3,127,81,-111,-53,-98,-3,-29,-84,2,-52,-10,-40, 
  /* [55][0][][] */ 36,-15,3,2,34,-44,-64,-127,-24,-60,-63,6,-5,-26,19,-6, 
  /* [56][0][][] */ -17,18,24,-25,-4,-25,-98,74,-17,127,6,-16,35,5,-2,14, 
  /* [57][0][][] */ -7,11,-54,-27,-62,-51,118,85,-32,28,-10,-7,19,22,127,-5, 
  /* [58][0][][] */ 51,26,-127,39,97,97,-38,55,-101,-47,-3,12,-28,29,-4,-29, 
  /* [59][0][][] */ -98,72,112,24,-76,-63,122,127,28,5,24,-13,11,15,70,-4, 
  /* [60][0][][] */ 9,-5,-49,1,21,-127,-29,-1,-8,-17,-6,-20,31,-12,2,12, 
  /* [61][0][][] */ 8,-17,24,127,73,24,26,-4,-92,5,15,37,-18,21,37,-53, 
  /* [62][0][][] */ -52,127,15,-51,-32,-12,-58,54,-27,-59,-77,-60,-5,-99,-54,-34, 
  /* [63][0][][] */ -40,29,-27,127,-80,16,-60,-29,-66,-22,-19,-39,29,69,40,49, 
  /* [64][0][][] */ 15,6,8,46,7,14,-8,69,29,3,-11,-41,-15,-127,45,-7, 
  /* [65][0][][] */ -20,-29,15,-126,49,-41,70,-29,-11,51,4,-127,-18,6,16,-54, 
  /* [66][0][][] */ 22,-15,65,-15,0,3,-5,101,21,-60,31,38,-5,127,11,66, 
  /* [67][0][][] */ -3,47,-19,-127,-14,-4,-59,31,74,-91,-27,-9,32,74,75,39, 
  /* [68][0][][] */ -32,36,127,11,11,8,9,0,-47,-16,-17,-39,13,-22,85,-26, 
  /* [69][0][][] */ 127,82,-21,-4,-107,-33,-28,-31,11,37,100,-53,-62,73,76,-92, 
  /* [70][0][][] */ 49,11,-48,-4,-21,25,49,127,-33,81,-37,9,10,60,-29,13, 
  /* [71][0][][] */ 5,-5,-11,7,1,-82,0,18,-44,17,-79,2,-127,-5,47,54, 
  /* [72][0][][] */ 16,25,-127,18,14,16,32,100,-37,-33,4,-3,22,19,-5,2, 
  /* [73][0][][] */ -47,20,38,1,46,-37,-71,-127,14,-73,37,-20,18,-49,43,-14, 
  /* [74][0][][] */ -11,28,34,127,14,-5,-76,79,-72,31,-64,42,20,-127,42,-113, 
  /* [75][0][][] */ -11,27,-59,7,12,-9,33,-18,127,27,1,-6,22,123,-38,5, 
  /* [76][0][][] */ 1,-13,0,21,5,-12,-13,65,19,-28,-27,-127,-7,-4,6,10, 
  /* [77][0][][] */ -13,58,-10,127,-26,20,81,102,17,25,-13,52,-13,-18,-32,-19, 
  /* [78][0][][] */ 8,5,34,-108,47,-34,-46,45,33,-44,-6,-32,16,127,15,43, 
  /* [79][0][][] */ -22,-102,-86,-65,-81,-10,20,-89,127,14,24,54,23,39,54,-49, 
  /* [80][0][][] */ -69,-20,127,-113,23,-54,27,-116,-51,83,-39,-125,33,97,89,-52, 
  /* [81][0][][] */ -47,42,-127,27,66,-121,-18,55,-2,-40,64,-1,19,7,14,-1, 
  /* [82][0][][] */ 127,-9,-1,15,18,-110,-17,17,-25,-12,-96,-4,99,6,-8,30, 
  /* [83][0][][] */ -27,91,-119,-91,-43,-5,43,-107,60,47,-31,-127,22,63,56,120, 
  /* [84][0][][] */ -46,27,64,-44,2,-27,67,-127,-55,45,-5,-67,33,50,74,6, 
  /* [85][0][][] */ -84,127,30,-119,-74,-31,-29,-3,-48,-1,-78,26,13,-8,-97,-32, 
  /* [86][0][][] */ 5,14,-23,5,-11,-22,127,27,4,-32,6,13,1,28,65,-21, 
  /* [87][0][][] */ -21,-35,-1,-127,16,-37,50,-10,-9,15,-6,-122,-15,2,17,-37, 
  /* [88][0][][] */ 127,-11,60,0,47,-114,29,50,-54,32,-122,-45,37,45,64,-7, 
  /* [89][0][][] */ 27,-18,-42,-43,30,-15,-21,-4,-45,2,32,-54,127,2,26,-49, 
  /* [90][0][][] */ -12,-62,35,-66,50,-19,-86,70,61,-69,-50,-34,-18,94,20,-127, 
  /* [91][0][][] */ -39,7,-14,-30,37,-5,-25,-78,4,56,-8,-127,-30,-9,-2,3, 
  /* [92][0][][] */ -23,22,41,18,0,-127,6,2,9,-22,-4,-12,3,-22,17,3, 
  /* [93][0][][] */ 34,-21,127,-10,-54,54,24,-27,-13,31,-73,-16,-26,1,29,-1, 
  /* [94][0][][] */ 25,-1,-15,-25,26,2,-21,-7,-39,-22,8,-64,127,-20,32,-29, 
  /* [95][0][][] */ 127,82,-20,31,-96,-20,-75,-23,-24,-16,83,-58,-43,22,83,-65, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00088847673032432795, 0.0006462882156483829, 0.0008056004298850894, 0.00095681386301293969, 0.00080613041063770652, 0.00066777679603546858, 0.00038564935675822198, 0.0009995094733312726, 0.00049064401537179947, 0.0009935570415109396, 0.00051828636787831783, 0.00059942650841549039, 0.00071872759144753218, 0.0031407000496983528, 0.00059476273600012064, 0.0004940275102853775, 0.00029509971500374377, 0.00072894338518381119, 0.0014634912367910147, 0.0007170788012444973, 0.00028516759630292654, 0.00018027532496489584, 0.00038456681068055332, 0.00030061500729061663, 0.00045844080159440637, 0.0011988157639279962, 0.0018983541522175074, 0.00095601804787293077, 0.00044196716044098139, 0.0010425432119518518, 0.00088204245548695326, 0.00058592215646058321, 0.00060215109260752797, 0.00044024223461747169, 0.0005089876358397305, 0.00048776008770801127, 0.00045345735270529985, 0.00050028733676299453, 0.00108374934643507, 0.00093089434085413814, 0.00031109436531551182, 0.0013083541998639703, 0.0011586573673412204, 0.00054333452135324478, 0.00084635510575026274, 0.0005290629924274981, 0.00072522502159699798, 0.00079938542330637574, 0.00068862352054566145, 0.00045733203296549618, 0.00054007250582799315, 0.0003715511120390147, 0.0014368109405040741, 0.00038653967203572392, 0.00086253258632495999, 0.00079008226748555899, 0.0013384876074269414, 0.00082482956349849701, 0.00071783165913075209, 0.00042399592348374426, 0.0018295047339051962, 0.0010860416805371642, 0.00055216520559042692, 0.0013719255803152919, 0.0012330706231296062, 0.00062907196115702391, 0.00021612206182908267, 0.00053078401833772659, 0.001130108255892992, 0.001328129437752068, 0.00054133578669279814, 0.00062180520035326481, 0.0017224983312189579, 0.00076291512232273817, 0.00071096816100180149, 0.00050810683751478791, 0.00078799499897286296, 0.00022816940327174962, 0.00028411441599018872, 0.00031144445529207587, 0.00032760135945864022, 0.00042429449968039989, 0.00047664254088886082, 0.00053756678244099021, 0.00036628046655096114, 0.00070880510611459613, 0.001828423235565424, 0.00046687701251357794, 0.00032360685872845352, 0.0014231362147256732, 0.00069452112074941397, 0.00062862207414582372, 0.00093632860807701945, 0.0012803771533071995, 0.00090202660067006946, 0.0007587020518258214, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -1635, 5578, 6867, 2102, -2997, -5203, 19660, 1643, 2887, -1517, 8723, -309, -8081, 2053, 11906, 5378, 14433, 4559, -3026, -5386, 5036, 34327, 18215, 12888, 930, 919, 3594, 2584, 3077, -4307, 3824, -3007, -223, 6064, 88, 1109, 9620, 4878, -1265, 4358, 9374, 4512, 2944, 9749, 5162, 4395, 1569, 6157, 4505, -6723, -6720, 570, -226, -1708, 2088, 5, 160, -697, -4890, 9950, -937, 1379, -1092, -1308, -3488, 6928, 22900, 1764, -2344, 576, 1651, 1939, 1785, -1236, 554, 9771, -400, 18620, 14663, -1306, 10447, 1759, -409, 1084, 11393, 7698, 2915, 1493, 4872, 3266, -329, -7267, 532, -1853, -1574, -1179, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00038871730794198811, 0.00028275744989514351, 0.00035245809704065323, 0.00041861546924337745, 0.00035268999636173248, 0.00029215891845524311, 0.0001687253825366497, 0.00043729523895308375, 0.00021466158796101809, 0.00043469096999615431, 0.00022675537911709398, 0.00026225499459542334, 0.0003144503862131387, 0.0013740871800109744, 0.0002602145541459322, 0.00021614189608953893, 0.00012910903024021536, 0.00031891989056020975, 0.00064029183704406023, 0.0003137290186714381, 0.00012476362462621182, 7.8872224548831582e-05, 0.00016825176135171205, 0.00013152202882338315, 0.00020057236542925239, 0.00052449369104579091, 0.00083054858259856701, 0.00041826730011962354, 0.00019336497643962502, 0.00045612291432917118, 0.00038590223994106054, 0.0002563467132858932, 0.00026344702928327024, 0.00019261031411588192, 0.00022268710017669946, 0.00021339983504731208, 0.00019839205197058618, 0.00021888062474317849, 0.00047415099106729031, 0.00040727542364038527, 0.00013610684254672378, 0.00057241780450567603, 0.00050692399963736534, 0.0002377141936449334, 0.00037028867518529296, 0.00023147025785874575, 0.00031729307374916971, 0.00034973898436874151, 0.00030127956415526569, 0.00020008726278319955, 0.00023628702911082655, 0.00016255726222880185, 0.00062861893093213439, 0.00016911490820348263, 0.00037736649392172694, 0.00034566875547170639, 0.00058560149045661092, 0.00036087105399928987, 0.00031405841582454741, 0.00018550238746684045, 0.00080042629269883037, 0.00047515390906482935, 0.00024157771258614957, 0.00060023093828931451, 0.00053948053391650319, 0.00027522517484612763, 9.4555529358331114e-05, 0.00023222323216032237, 0.00049443345051258802, 0.000581069674808532, 0.00023683972540311515, 0.0002720459015108645, 0.00075360998744145036, 0.00033378286752849817, 0.000311055569909513, 0.00022230173635762185, 0.00034475556458346546, 9.9826356745325029e-05, 0.00012430285278242081, 0.00013626001600641757, 0.00014332881255540997, 0.0001856330200098455, 0.00020853579917456955, 0.00023519076057709754, 0.00016025130753405392, 0.00031010920065455139, 0.00079995312262326479, 0.0002042632841039449, 0.00014158118574414402, 0.00062263611471280456, 0.00030385982245206833, 0.00027502834564074874, 0.00040965297375805676, 0.00056017760653048754, 0.00039464549627155066, 0.0003319396055303514, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 27,60,24,-89,-79,-3,-9,72,-24,-34,-120,-104,-126,116,-60,59,30,93,9,9,-41,-112,-47,21,100,-103,-4,98,41,-80,71,4,-94,93,24,-65,-40,16,-95,-21,-103,-47,112,-72,71,-16,-79,104,-120,83,-91,30,-36,89,10,61,-84,-98,2,20,-15,73,44,-127,80,-121,-115,53,46,-85,-25,120,-62,41,-48,107,-46,-68,-39,-19,-117,48,58,35,-49,-70,-62,-52,23,42,23,65,-106,-101,-48,62, 
  /* [1][0][][] */ 72,-3,73,49,0,-116,8,116,36,51,-75,72,-117,-107,25,-73,-63,-30,14,-24,104,91,-89,-73,37,-14,-24,-74,84,44,-24,-70,-87,-87,-88,-93,30,-66,-52,22,6,112,-8,22,38,2,-35,41,16,-126,-8,-43,-8,-110,-50,-105,48,48,95,5,62,-97,-39,-15,121,-15,2,100,58,95,61,115,6,28,42,35,73,-76,127,-16,-82,101,-87,86,32,18,-111,33,-58,-61,64,-32,-61,-14,46,27, 
  /* [2][0][][] */ -3,-74,-89,-127,-46,18,71,-2,22,-54,-72,-51,49,76,-77,-123,-99,33,-16,29,-99,-58,27,22,-88,68,-49,-41,-9,-40,-90,28,49,-75,54,-1,-80,18,-83,66,56,-39,112,75,-70,-23,48,24,-20,-57,-1,89,-85,-84,-2,-84,-53,22,83,113,97,102,-72,103,109,90,-80,-86,-1,15,67,-27,33,4,-6,-75,93,117,-110,-84,-94,112,81,29,-79,34,42,28,72,78,80,113,-58,-37,80,79, 
  /* [3][0][][] */ -81,96,61,-88,117,104,75,72,103,21,39,-65,106,42,107,110,-127,73,-56,102,-73,74,-84,2,108,76,-105,17,50,35,-47,111,-101,28,24,-95,-99,-42,-84,-59,-91,-43,-69,21,-76,-106,-30,-36,-57,95,-34,-102,6,49,100,-69,-86,-107,63,-98,-87,28,-91,-28,10,89,-59,-38,-32,-48,82,7,84,86,-57,-79,-123,-58,80,-64,58,101,-80,-91,75,-115,95,-90,-36,-113,98,98,-89,-41,32,-45, 
  /* [4][0][][] */ -99,21,81,-13,64,24,-20,-52,15,70,-107,-44,-88,94,27,-99,98,39,-21,-81,-98,82,-112,-22,-25,-115,88,49,27,-111,113,27,-121,42,-41,-60,112,-21,-127,-104,105,94,-105,-104,-20,88,-43,-38,114,-17,111,118,106,-122,-3,35,-111,-29,115,-49,80,-18,-22,68,-49,28,-110,-89,22,97,48,-15,-55,-12,31,-74,-25,95,-39,33,29,-111,50,-1,50,118,14,-69,-30,-13,111,57,95,-9,-111,-119, 
  /* [5][0][][] */ -97,117,-56,-53,8,-41,-45,66,-16,-90,60,42,-83,35,114,115,-127,126,115,-5,116,10,-54,113,-116,54,-37,-70,-51,41,70,0,-72,74,63,62,101,-60,-62,-39,85,-2,-12,-57,110,123,12,-7,28,108,104,57,-81,-44,52,-37,110,-44,-71,73,63,42,-4,73,81,-57,49,56,99,-63,51,7,-106,93,15,-96,-55,63,36,0,82,116,-99,-45,54,-30,-93,-12,86,116,-37,120,-19,100,4,114, 
  /* [6][0][][] */ 92,-14,21,-87,-92,-3,71,-87,17,89,43,127,23,-63,3,114,-39,91,43,87,-96,119,101,54,-45,63,-99,-78,-17,-82,-9,12,-83,20,86,74,-76,-25,6,65,-65,46,71,25,-87,73,-69,-4,65,121,-18,7,-50,-111,-21,-75,-39,-7,13,95,25,-22,105,-14,119,93,-3,51,8,-81,-26,-24,74,-52,112,112,-21,67,-29,-75,31,-6,6,-115,80,19,3,106,10,-75,-42,-90,-69,33,94,-89, 
  /* [7][0][][] */ 61,33,-24,-94,84,41,-26,-51,20,-68,-10,18,-34,89,80,46,63,-3,-25,42,59,-77,-11,-48,82,-61,46,114,-38,-27,-14,8,-100,-36,55,-31,96,-5,-4,-84,-90,27,-52,64,7,-53,-77,-49,49,28,-30,83,-23,31,47,25,46,-97,-1,-93,15,-39,-41,-47,-8,-49,-84,-82,34,-91,-82,4,-88,55,-37,69,-61,-39,-61,-6,-89,31,5,54,-53,-69,-19,-68,38,93,127,-71,24,-70,71,-95, 
  /* [8][0][][] */ -54,-55,-106,-1,33,-6,-17,-100,93,-115,123,-86,-24,-99,-119,3,23,81,98,-76,99,65,100,-55,-64,-102,18,-92,-78,-83,-100,-8,-42,-3,-90,113,-112,-99,-54,-64,-20,25,44,-19,-10,-56,-20,96,67,91,-34,-21,127,20,-14,-98,0,2,-9,24,-97,-27,-106,98,-14,-38,14,-62,-89,40,-91,53,50,86,112,91,94,-3,-8,-22,39,104,-7,65,73,-51,-16,72,59,60,-50,64,-108,109,116,-40, 
  /* [9][0][][] */ -38,-39,23,69,26,54,79,29,9,43,63,52,104,51,-34,-29,-10,-63,-73,-83,-92,77,19,-27,-85,-66,-47,56,66,-118,-34,47,-93,-68,109,-31,-29,-7,-75,-69,100,86,-3,2,35,53,23,-26,-29,-42,-103,-66,-108,25,20,69,-6,-78,10,3,-5,-63,29,80,-127,72,67,59,96,-69,-111,13,46,17,59,-107,105,-69,10,-50,-116,-44,81,-83,54,-74,-92,16,-73,86,25,7,-86,23,25,49, 
  /* [10][0][][] */ -98,44,-78,-101,-33,87,-127,-104,78,-108,83,62,-7,30,70,-11,108,11,-99,34,-11,-66,-46,82,28,105,-33,-29,-107,-82,-16,-111,62,33,107,-117,114,-87,42,112,82,26,29,55,-18,26,-8,-9,-89,115,91,107,90,-103,93,55,19,-15,77,-15,73,68,96,57,-45,104,-5,53,8,-19,63,27,-103,-111,23,58,68,95,76,3,-4,37,9,25,12,72,-91,26,-14,33,-66,88,50,73,19,-25, 
  /* [11][0][][] */ 81,61,-74,-76,75,-40,-37,-83,-82,47,43,-25,17,-66,51,-70,-115,72,-20,-44,-38,-38,63,-74,-87,95,67,74,-22,46,4,40,53,80,-127,-65,-2,114,-52,-65,52,-99,103,-96,83,29,-90,-20,50,54,-57,91,50,-67,-37,-84,-31,76,-91,68,-30,-27,113,-43,64,-25,85,1,83,95,-53,22,-79,-36,8,-99,-6,68,-70,-8,-84,-14,-109,95,4,-68,-39,-22,-75,47,-53,-48,80,24,112,18, 
  /* [12][0][][] */ -66,-28,-58,103,51,25,-28,-62,-16,18,-27,42,-82,-63,-20,71,70,-25,17,120,-73,-8,84,69,11,127,-55,15,127,-17,86,70,32,-20,27,-74,49,-60,71,65,92,96,51,-44,40,0,-44,100,-64,115,-48,109,-49,-95,102,50,-3,-64,-51,-58,53,18,123,-19,-29,12,24,-53,-66,-92,43,-1,-65,-40,9,-3,-53,14,90,-62,36,108,114,-13,78,-35,1,-51,-35,-55,-1,3,-54,-21,-69,73, 
  /* [13][0][][] */ 68,49,62,-41,69,8,14,-33,36,-97,32,13,24,88,20,58,52,60,-6,93,118,-31,-25,-92,59,-91,4,-82,11,-86,-19,2,13,-85,9,10,44,-89,91,47,-7,-55,77,62,56,5,69,43,-71,62,-31,-1,-47,-73,1,102,9,-32,59,-80,-76,-26,83,-3,-79,34,-51,-71,-101,-44,-102,100,-59,2,81,-37,-35,65,-26,-32,79,30,-20,127,93,-48,-108,79,-59,-45,12,-17,76,66,-11,-47, 
  /* [14][0][][] */ -45,-68,87,59,50,-70,23,-13,-7,72,-30,-55,-10,108,-26,41,-81,-30,-5,-97,-9,42,-47,-33,-37,-18,66,28,87,-79,74,-46,-51,93,127,21,40,73,-89,-91,105,116,115,26,79,-72,-3,-42,-111,27,-32,-60,2,-118,91,-109,27,-93,-30,-92,-93,-88,22,6,-2,61,12,-13,-107,-8,50,-66,-97,-75,73,-15,-86,-6,71,1,118,-31,110,35,-76,-61,-60,73,54,-7,-60,-33,-20,-106,-73,-54, 
  /* [15][0][][] */ 32,56,-17,-70,-119,74,14,64,-122,-39,115,-55,-20,-55,-47,-35,-38,101,-114,24,-25,-92,-59,-29,0,-2,107,105,-47,-79,-121,29,65,113,-49,-23,-34,115,-29,-96,-61,127,119,-59,92,63,-78,-94,32,-35,-32,-91,-84,-3,42,19,48,-12,102,-54,-112,-114,-101,-61,-42,35,-19,-82,-25,-73,-85,17,76,55,13,80,-29,107,-110,-28,-25,-67,-50,-54,-51,-38,116,-36,67,-102,-100,109,-2,-56,125,-74, 
  /* [16][0][][] */ -12,21,-107,117,90,-73,99,106,-45,41,83,-80,-58,85,-127,-36,28,79,-65,-33,-124,-28,-112,11,106,-72,-85,21,-62,97,110,32,-88,-52,15,7,-20,90,-125,62,44,29,77,-61,-103,-18,-108,-67,-29,42,94,67,-49,-127,54,2,38,91,-47,-71,37,-28,-5,63,-16,29,67,-51,-3,-64,70,14,74,-8,45,-89,80,-62,-103,-57,-35,22,-14,-113,92,-71,-5,-119,109,-103,97,-114,44,21,72,-105, 
  /* [17][0][][] */ -18,92,-127,-34,-53,-1,-45,106,29,-31,103,-24,-40,105,33,-63,17,82,-28,72,19,-17,-61,-17,-109,9,-38,-96,-70,48,68,-104,67,-40,-41,44,26,-55,-26,45,-41,119,-28,-83,111,24,-81,-97,34,-110,-11,-112,-76,13,48,30,-70,85,-63,-69,105,74,72,85,-54,36,-98,75,-77,-66,12,-22,-39,-34,-3,40,-116,-64,113,-103,-62,-3,93,-49,79,39,-46,103,14,124,-42,65,-100,-69,78,-26, 
  /* [18][0][][] */ 84,-114,-127,-14,46,21,-114,-100,-55,51,-83,-86,-17,102,26,44,20,96,-87,-38,-86,56,28,42,31,-16,40,-117,-37,-119,36,-117,-30,91,112,-60,29,-37,-62,-80,-102,30,122,-59,-22,47,105,-59,93,12,-49,-89,-45,2,-32,37,73,30,-119,68,-99,-51,74,111,-8,29,-97,-109,103,-33,-67,94,-100,118,-10,118,33,96,-9,-24,-60,-46,-106,106,10,-63,108,20,76,32,-48,124,-97,-5,5,-113, 
  /* [19][0][][] */ 73,66,-113,87,90,67,-59,9,99,-36,8,-40,71,83,120,-43,30,-96,-22,121,-90,-82,29,124,75,-8,32,-34,63,46,116,-115,74,-21,-97,88,-116,-21,-67,23,72,43,54,52,-35,52,-105,108,127,28,90,-22,75,-82,89,112,58,14,-100,-47,-37,40,115,-41,105,-8,-75,95,111,-4,-89,10,18,91,13,93,11,87,-81,123,-106,-53,107,-95,46,17,92,-80,-78,-5,-18,16,-23,-49,89,-104, 
  /* [20][0][][] */ -9,-74,8,50,111,47,72,37,-47,-52,17,13,-24,-69,3,-75,24,-47,92,32,49,-87,105,-16,-83,93,-64,40,36,-65,-39,4,32,84,95,-51,127,13,-91,16,82,-93,-73,-17,38,14,-37,-34,67,14,95,-67,15,75,22,-76,-48,-102,79,36,-29,114,58,65,26,83,39,-68,28,70,-40,19,-71,-82,-2,120,-8,-38,37,-62,12,88,76,-45,47,15,-60,-95,97,12,-76,-72,54,-48,21,58, 
  /* [21][0][][] */ 92,114,108,-75,-46,-56,-91,-47,-13,107,26,-100,-38,-71,-99,-102,-39,-7,-78,-88,-30,57,110,-65,96,27,95,-24,-70,-110,121,16,-85,39,94,115,-125,-76,-123,31,11,59,-30,5,-65,108,-115,70,75,-127,-7,-78,56,-33,-111,-29,-43,-58,83,86,28,-51,-11,117,-51,51,-75,15,-7,-40,-18,23,-46,-73,-63,3,-101,106,115,105,-38,102,-7,3,-120,-74,23,38,-47,51,-83,92,-30,-113,112,9, 
  /* [22][0][][] */ -29,-49,89,-32,-69,-64,73,40,30,-22,-28,32,-47,20,-28,-87,-55,-13,-45,52,30,83,-14,60,-81,24,-64,63,-19,-68,-60,-67,-75,81,33,29,54,-84,-61,-60,-28,-13,-68,-5,43,-42,80,-64,-66,4,-80,53,-50,79,-18,29,82,70,-86,72,-60,6,-13,6,60,-88,-73,-28,49,68,-74,-39,-3,61,-43,-5,-86,-67,39,-35,71,-69,-82,-47,29,58,-33,79,16,67,127,9,-87,69,66,50, 
  /* [23][0][][] */ -34,3,4,-31,-112,-16,57,12,22,-92,56,-99,-112,81,62,-40,10,42,46,24,48,91,54,-9,51,-51,-66,-75,-127,77,-4,111,76,-59,80,-17,-26,106,70,-75,113,44,97,-92,-91,0,-88,95,25,68,-45,-11,-87,109,68,12,29,0,49,-32,-44,15,77,-103,105,-90,6,-11,77,108,-71,104,92,41,-2,-47,-107,10,-91,-10,-102,8,-109,-74,-49,-112,111,-107,-41,-70,-45,-70,2,-57,-68,118, 
  /* [24][0][][] */ 0,97,111,112,65,-61,-103,116,1,-94,-80,98,26,6,-3,-57,-23,47,-55,95,127,-20,-20,40,-22,73,-66,-67,62,126,108,-22,126,-43,-18,-20,17,-39,-81,-85,12,119,-78,53,-42,83,59,-61,-91,-84,36,-15,-56,87,126,-39,65,-42,-14,-24,117,30,62,-15,-113,-2,-62,122,72,-79,-11,37,0,-101,-4,-41,32,-55,-26,77,75,-45,60,-44,-78,-65,-11,-59,-83,89,-61,-22,-66,-74,82,124, 
  /* [25][0][][] */ -24,5,34,50,44,49,-63,35,-29,63,53,63,-105,63,85,-84,1,-19,-79,3,52,103,26,122,41,-54,-68,-18,89,55,-92,53,-49,-59,106,102,-47,47,-80,85,-80,85,43,48,-7,-74,-89,-66,-23,43,-77,-38,5,-12,-92,-82,58,-53,106,53,-67,127,-73,-17,-66,-70,-43,59,41,-10,38,47,49,49,24,27,19,37,30,-82,-72,14,-5,20,73,30,-22,33,-73,79,-22,-13,-1,109,76,27, 
  /* [26][0][][] */ 64,-74,3,-10,92,-81,89,-39,39,-32,-83,4,-39,-63,31,-24,98,7,-85,-72,40,-49,61,81,-6,-34,41,45,39,-9,-47,-38,-27,42,43,102,7,80,-111,93,84,4,-29,-92,-9,45,101,8,15,55,77,-23,82,88,54,26,78,0,-59,-15,12,127,-80,-105,43,-29,-100,-32,1,-50,21,36,-104,-62,-76,-67,-20,20,-23,52,94,11,-46,-23,-14,-41,-14,-83,21,11,80,96,-47,54,39,-42, 
  /* [27][0][][] */ 55,37,-123,114,-36,-36,-1,-10,-100,87,-37,-18,-122,71,76,-58,37,-124,-33,-119,-31,51,80,-99,-127,68,-48,48,89,-69,60,-127,105,-95,33,102,106,53,-85,-49,28,50,-32,57,62,-100,102,-79,-27,-71,58,90,101,54,-127,-99,86,-38,-30,4,32,-81,-122,-102,26,108,20,-105,36,-14,24,-115,18,-85,-3,-92,-93,-11,67,13,-69,-88,88,-3,-117,-102,53,-40,109,13,41,106,88,27,63,-110, 
  /* [28][0][][] */ -113,123,-59,86,-14,68,-107,-3,62,-64,-99,75,72,-74,24,-99,-93,82,51,102,106,78,9,-89,74,-65,84,103,-91,26,-18,44,-19,22,-55,-54,16,107,-37,127,-93,-24,-2,70,115,116,-11,6,120,-13,-113,11,65,-40,29,70,99,50,45,83,50,-71,8,-109,-75,-2,92,-41,-91,68,75,119,-113,63,107,27,68,-50,-8,85,-69,69,60,-22,60,18,-74,-61,-96,22,75,-85,53,54,-10,116, 
  /* [29][0][][] */ 17,-23,35,16,-31,4,20,-119,-59,-36,-54,-86,71,-23,-87,-32,90,93,-72,96,30,-74,-90,-100,88,-65,-101,-60,-49,89,-65,25,-103,116,108,-3,-38,-99,19,-36,111,-55,-27,32,-86,62,-118,0,-37,72,23,43,-86,-17,85,92,32,-20,-65,6,118,102,-80,38,72,-88,-127,34,69,-11,-37,-51,-27,-125,-34,-99,-67,31,-2,64,-10,-44,28,-30,21,-120,-72,89,-16,32,-76,-62,-105,-13,-72,-68, 
  /* [30][0][][] */ -77,-97,-97,-55,56,89,55,1,-80,38,30,66,97,56,-112,-115,92,116,93,8,-14,-81,124,-80,23,59,-30,9,72,-45,8,46,-2,-32,16,28,-96,-36,79,-22,-11,-98,-73,-89,82,121,-39,-37,-71,111,-98,-42,-112,-21,95,-107,103,58,0,-4,-53,-127,50,85,122,99,27,69,89,87,124,-84,33,-116,-105,21,61,-30,-8,-42,50,53,99,44,82,-61,68,40,109,36,52,-121,10,82,-76,-65, 
  /* [31][0][][] */ 41,127,87,-45,-46,15,104,-89,-86,-58,64,-69,-87,-91,100,20,2,52,-42,29,-25,-43,104,7,70,94,-43,-55,7,84,60,71,78,36,71,110,64,116,-18,-90,-6,110,-100,37,29,107,47,-8,-117,-15,-62,64,20,-93,-17,-9,9,34,33,126,-5,-100,122,-117,22,-98,84,-73,-114,32,112,-34,80,-75,-32,67,-8,93,59,-87,-5,-17,-115,-90,-33,83,123,-111,-73,90,43,-27,-55,-36,-120,67, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0017534960061311722, 0.0018046296900138259, 0.0017360118217766285, 0.0018079389119520783, 0.0017633846728131175, 0.0017700348980724812, 0.0019846833311021328, 0.0022021438926458359, 0.0018095956183969975, 0.0017926851287484169, 0.0017550669144839048, 0.0019184050615876913, 0.002136655617505312, 0.0020554533693939447, 0.0018093988765031099, 0.001736584585160017, 0.0017452544998377562, 0.0017636840930208564, 0.0017368783010169864, 0.0017026239074766636, 0.0021809362806379795, 0.0017472152831032872, 0.0025262024719268084, 0.001905270735733211, 0.0017629124922677875, 0.0022511763963848352, 0.0020132444333285093, 0.001763764419592917, 0.0017762972274795175, 0.0017788291443139315, 0.0017435329500585794, 0.0016530479770153761, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -216, 136, -265, -266, 136, 140, 1033, -169, 108, -241, -191, 107, 1039, -641, 138, 85, -293, 142, 98, 147, 114, -295, -59, 29, 188, 812, -154, -277, 113, -113, 58, -157, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.1258728742832318e-05, 4.2461877455934882e-05, 4.0847338823368773e-05, 4.2539741116343066e-05, 4.149140659137629e-05, 4.1647879697848111e-05, 4.669843110605143e-05, 5.1815150072798133e-05, 4.2578722059261054e-05, 4.2180829041171819e-05, 4.1295694245491177e-05, 4.5138942368794233e-05, 5.0274251407245174e-05, 4.8363610403612256e-05, 4.2574090912239626e-05, 4.0860813896870241e-05, 4.1064813558477908e-05, 4.1498449718346819e-05, 4.0867726056603715e-05, 4.006173912785016e-05, 5.1316150347702205e-05, 4.1110950405709445e-05, 5.9440058976178989e-05, 4.4829899707110599e-05, 4.1480296204099432e-05, 5.2968858653912321e-05, 4.7370456741191447e-05, 4.1500341467326507e-05, 4.1795228753471747e-05, 4.1854804294416681e-05, 4.1024304664460942e-05, 3.8895246689207852e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -57,-20,-46,-47,85,-4,127,24,33,-79,-88,-65,101,-26,102,-29,-89,-2,70,9,90,-37,105,-45,-52,100,10,-95,-78,-80,34,21, 
  /* [1][0][][] */ 92,127,-88,-76,15,103,8,-53,73,-100,-90,59,-72,-1,32,82,-88,99,103,76,-72,0,-15,48,105,-9,-81,-89,63,89,114,-111, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0037904239725321531, 0.0033793703187257051, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 20954, -23330, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00019159546354785562, 0.00017081783153116703, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.58624064922332764, } };
const TfArray<1, int> quant46_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.49382215738296509, } };
const TfArray<1, int> quant50_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.54333144426345825, } };
const TfArray<1, int> quant53_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.70252203941345215, } };
const TfArray<1, int> quant54_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.32561618089675903, } };
const TfArray<1, int> quant58_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22198592126369476, } };
const TfArray<1, int> quant61_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.35903224349021912, } };
const TfArray<1, int> quant62_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25879433751106262, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.43750983476638794, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.050547238439321518, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.072979561984539032, } };
const TfArray<1, int> quant69_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
